{"version":3,"sources":["../../../source/lib/normalize/index.css","examples.scss","../../../source/scss/jig/grid.scss","../../../source/scss/jig/breakpoints.scss","../../../source/scss/jig/content.scss"],"names":[],"mappings":"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","file":"scss.css","sourcesContent":["/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n/*# sourceMappingURL=index.css.map */\n","@use 'defines' as *;\n@use 'jig' as * with ($JIG_CONFIG : $JIG_CONFIG);\n\n\n\n@mixin render(){\n\t%example-grid {\n\t\t@include grid-container();\n\n\t\tposition: relative;\n\n\t\tpadding: gutter-value();\n\t\tborder: 3px solid red;\n\n\t\t&:before {\n\t\t\tcontent: '';\n\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\n\t\t\tbackground-size: cover;\n\t\t\tbackground-position: center center;\n\t\t\t@include attributes-for-breakpoints((\n\t\t\t\t'background-color' : $GRID_CONTAINER_BACKGROUNDCOLOR,\n\t\t\t\t'background-image' : $GRID_CONTAINER_BACKGROUNDIMAGE\n\t\t\t));\n\n\t\t\tfilter: saturate(150%) brightness(38%);\n\t\t}\n\n\t\t@include breakpoint(medium){\n\t\t\tpadding: gutter-value();\n\t\t}\n\n\t\t@include breakpoint(large){\n\t\t\tpadding: gutter-value($breakpoint:large);\n\t\t}\n\n\n\n\t\t> div,\n\t\t> div > div {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\n\t\t\tposition: relative;\n\n\t\t\tborder: 3px solid dodgerblue;\n\n\t\t\tcolor: white;\n\t\t\tfont-size: base-font-size-value() * 1.5;\n\t\t\ttext-shadow: 1px -1px 3px black, 1px 1px 3px black, -1px 1px 3px black, -1px -1px 3px black;\n\n\t\t\tbackground-size: cover;\n\t\t\tbackground-position: center center;\n\t\t\tbackground-color: dodgerblue;\n\n\t\t\tfilter: grayscale(50%) hue-rotate(-10deg) saturate(200%);\n\n\t\t\t&:nth-of-type(1){\n\t\t\t\tbackground-image: url('../files/img/block-1.jpg');\n\t\t\t}\n\n\t\t\t&:nth-of-type(2){\n\t\t\t\tbackground-image: url('../files/img/block-2.jpg');\n\t\t\t}\n\n\t\t\t&:nth-of-type(3){\n\t\t\t\tbackground-image: url('../files/img/block-3.jpg');\n\t\t\t}\n\n\t\t\t&:nth-of-type(4){\n\t\t\t\tbackground-image: url('../files/img/block-4.jpg');\n\t\t\t}\n\n\t\t\t&:nth-of-type(5){\n\t\t\t\tbackground-image: url('../files/img/block-5.jpg');\n\t\t\t}\n\t\t}\n\n\n\n\t\t&:hover {\n\t\t\t&:before,\n\t\t\t> div,\n\t\t\t> div > div {\n\t\t\t\tborder-color: lightskyblue;\n\n\t\t\t\tbackground-image: none !important;\n\n\t\t\t\tfilter: none !important;\n\t\t\t}\n\n\t\t\t> div > div {\n\t\t\t\tfilter: invert(100%) !important;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t#basic-grid-example {\n\t\t.examples > .scss {\n\t\t\t@include content-holder($centered:true);\n\n\n\n\t\t\t> .grid {\n\t\t\t\t@extend %example-grid;\n\n\n\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(odd){\n\t\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(even){\n\t\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(medium up){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\theight: 80px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\theight: 60px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\theight: 40px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\theight: 20px;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(medium down){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t@include grid-item();\n\n\t\t\t\t\t\t\theight: 25vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\t\t\theight: 12.5vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t\t\t@include grid-item-align($vertical:bottom);\n\n\t\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t\t@include grid-item-align(center, center);\n\t\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\t\twidth: 100px;\n\t\t\t\t\t\t\theight: 5vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t\torder: 1;\n\n\t\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t#advanced-grid-example {\n\t\t.examples > .scss {\n\t\t\t@include content-holder($centered:true);\n\n\n\n\t\t\t> .grid {\n\t\t\t\t@extend %example-grid;\n\n\t\t\t\t@include spacing-based-attribute(padding-top, 'xxl');\n\n\n\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(odd){\n\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t@include grid-item-align(null, end);\n\n\t\t\t\t\t\theight: gutter-value($direction:'vertical') * 2.5;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(even){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:first-of-type {\n\t\t\t\t\t\t@include grid-item($span:4, $row-span:2);\n\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\n\t\t\t\t\t\theight: auto;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(xsmall only){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t\torder: 5;\n\n\t\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\t\theight: gutter-value() * 3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t\t@include grid-item($start:8, $end:12);\n\t\t\t\t\t\t\torder: 4;\n\n\t\t\t\t\t\t\theight: 80px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\t@include grid-item($start:6, $span:2);\n\t\t\t\t\t\t\t@include grid-item-align(full, center);\n\t\t\t\t\t\t\torder: 3;\n\n\t\t\t\t\t\t\theight: 60px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t@include grid-item(8, $row-start:1, $row-end:3);\n\t\t\t\t\t\t\t@include grid-item-align('right', $vertical:'full');\n\t\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t\t@include grid-item-align(left, top);\n\t\t\t\t\t\t\torder: 1;\n\t\t\t\t\t\t\tz-index: 1;\n\n\t\t\t\t\t\t\twidth: 200%;\n\t\t\t\t\t\t\theight: 55px;\n\n\t\t\t\t\t\t\tborder-color: red;\n\n\t\t\t\t\t\t\tbackground-color: red;\n\t\t\t\t\t\t\tbackground-image: url('../files/img/block-7.jpg');\n\n\t\t\t\t\t\t\ttransform: rotate(10deg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:0, $row-span:1);\n\t\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\t\torder: 1;\n\n\t\t\t\t\t\t\twidth: auto;\n\t\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t\t@include grid-item($start:4, $end:8, $row-start:0, $row-span:2);\n\t\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t\t@include grid-item($start:8, $span:4, $row-start:0, $row-span:3);\n\t\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\t\torder: 3;\n\n\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:1, $row-end:2);\n\t\t\t\t\t\t\t@include grid-item-align(right, center);\n\t\t\t\t\t\t\torder: 4;\n\n\t\t\t\t\t\t\twidth: 100px;\n\t\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t\t\t@include grid-item-align(stretch);\n\t\t\t\t\t\t\torder: 5;\n\n\t\t\t\t\t\t\twidth: auto;\n\t\t\t\t\t\t\theight: 20vh;\n\n\t\t\t\t\t\t\tborder-color: dodgerblue;\n\n\t\t\t\t\t\t\tbackground-color: dodgerblue;\n\t\t\t\t\t\t\tbackground-image: url('../files/img/block-8.jpg');\n\n\t\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\t#real-world-grid-example {\n\t\t.examples > .scss {\n\t\t\t@include content-holder($centered:true);\n\n\n\n\t\t\t> .grid {\n\t\t\t\t@extend %example-grid;\n\n\n\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\tcontent: 'Stage';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\t\torder: 1;\n\n\t\t\t\t\t\t@include spacing-based-attribute('height', 'xxl', 3.0);\n\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-bottom: 0;\n\n\t\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\t\tmargin-bottom: gutter-value($direction:vertical) * -3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\t\tmargin-bottom: gutter-value($direction:vertical) * -3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\tcontent: 'Navbar';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t\t@include grid-item(4, $row-span:2);\n\t\t\t\t\t\t\torder: 3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t\t@include grid-item(3);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t@include grid-item();\n\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\t@include grid-container();\n\n\t\t\t\t\t\t> div {\n\t\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\t\t\tcontent: 'Text';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@include grid-item(12);\n\n\t\t\t\t\t\t\t\theight: spacing-value('md') * 10;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\t\t\tcontent: 'Teaser';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@include grid-item(12);\n\n\t\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t\t@include grid-item($start:0, $span:8);\n\n\t\t\t\t\t\t\t> div {\n\t\t\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t\t\theight: spacing-value('md') * 7;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\t\tmargin-top: 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t\t@include grid-item(9);\n\n\t\t\t\t\t\t\t> div {\n\t\t\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t\t\theight: spacing-value('md') * 5;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\tcontent: 'Hint';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include grid-item($start:1, $end:11);\n\t\t\t\t\t\torder: 4;\n\n\t\t\t\t\t\tmargin-top: gutter-value($direction:'vertical') * -0.5;\n\n\t\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t\t@include grid-item(8, $start:0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t\t@include grid-item($start:3, $span:6);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\tcontent: 'Footer';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\t\torder: 5;\n\n\t\t\t\t\t\t@include spacing-based-attributes((\n\t\t\t\t\t\t\t'padding-top' : 'md',\n\t\t\t\t\t\t\t'padding-bottom' : 'xl'\n\t\t\t\t\t\t));\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical);\n\n\t\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * 2.5;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * @namespace Grid\n */\n\n\n\n@use 'sass:meta';\n@use 'sass:string';\n@use 'sass:map';\n\n@use 'globals' as *;\n@use 'breakpoints';\n\n\n\n/**\n * @namespace Grid:grid-container\n */\n\n/**\n * Renders the basic properties of a grid container, which is the bracket element for elements, which are\n * to be placed in a grid, thereby making the container, more or less, \"the grid itself\".\n *\n * The basic characteristic of this container is the pre-definition of usable grid columns, according to our config.\n *\n * @memberof Grid:grid-container\n * @function\n * @name grid-container\n * @alias grid-container\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-container();\n */\n@mixin grid-container(){\n\tdisplay: grid;\n\tgrid-auto-flow: row;\n\tgrid-template-columns: repeat(map.get($jig---grid-config, 'columns'), 1fr);\n\t@include breakpoints.attributes-for-breakpoints((\n\t\t'grid-column-gap' : map.get($jig---grid-config, 'gutters', 'horizontal'),\n\t\t'grid-row-gap' : map.get($jig---grid-config, 'gutters', 'vertical')\n\t));\n}\n\n\n\n/**\n * @namespace Grid:grid-item\n */\n\n/**\n * Renders the basic properties of a grid item, which is an item inside a grid, being placed according to\n * pre-defined columns.\n *\n * The main purpose of this mixin is, to define the space, the item takes inside the grid. To do this, there are\n * several means of definition. Either just giving it a column-based width, aligning it at the end of other,\n * already existing items, or defining a specific area it should cover, by explicitly defining a start and end column\n * or a combination of both.\n *\n * Additionally, the item may also be defined to take up more than one row, adding the native grid capabilities to\n * our concepts.\n *\n * @memberof Grid:grid-item\n * @function\n * @name grid-item\n * @alias grid-item\n *\n * @param {?Number} [$span=null] - the width of the item in columns\n * @param {?Number} [$start=null] - the horizontal start offset of the item in columns, may be combined with end or span\n * @param {?Number} [$end=null] - the horizontal end offset of the item in columns, may be combined with start or span\n * @param {?Number} [$row-span=null] - the height of the item in rows\n * @param {?Number} [$row-start=null] - the vertical start offset of the item in rows, may be combined with row-end or row-span\n * @param {?Number} [$row-end=null] - the vertical end offset of the item in rows, may be combined with row-start or row-span\n *\n * @see grid-container\n * @see grid-item-align\n *\n * @example\n * \\@include grid-item(12);\n * \\@include grid-item(6, 6);\n * \\@include grid-item(null, 2, 2);\n * \\@include grid-item(6, null, null, 2);\n * \\@include grid-item(6, null, null, null, 0, 5);\n */\n@mixin grid-item(\n\t$span:null,\n\t$start:null,\n\t$end:null,\n\t$row-span:null,\n\t$row-start:null,\n\t$row-end:null\n){\n\t@if ($span == null) and ($start == null) {\n\t\tgrid-column-end: span map.get($jig---grid-config, 'columns');\n\t} @else {\n\t\t@if $span != null {\n\t\t\tgrid-column-end: span $span;\n\t\t}\n\n\t\t@if $start != null {\n\t\t\tgrid-column-start: $start + 1;\n\t\t}\n\n\t\t@if ($end != null) and ($span == null) {\n\t\t\tgrid-column-end: $end + 1;\n\t\t}\n\t}\n\n\t@if ($row-span != null) or ($row-start != null) {\n\t\t@if $row-span != null {\n\t\t\tgrid-row-end: span $row-span;\n\t\t}\n\n\t\t@if $row-start != null {\n\t\t\tgrid-row-start: $row-start + 1;\n\t\t}\n\n\t\t@if ($row-end != null) and ($row-span == null) {\n\t\t\tgrid-row-end: $row-end + 1;\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Grid:grid-item-align\n */\n\n/**\n * Renders properties of a grid item, to define the item's alignment inside the area defined for the item using\n * the grid-item mixin. The usage of this only make sense for grid items.\n *\n * @memberof Grid:grid-item-align\n * @function\n * @name grid-item-align\n * @alias grid-item-align\n *\n * @param {String} [$horizontal=null] - \"left\"/\"start\", \"right\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n * @param {String} [$vertical=null] - \"top\"/\"start\", \"bottom\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-item-align('left');\n * \\@include grid-item-align(center, center);\n * \\@include grid-item-align(null, 'full');\n */\n@mixin grid-item-align($horizontal:null, $vertical:null){\n\t@if $horizontal == 'left' {\n\t\t$horizontal: 'start';\n\t} @else if $horizontal == 'right' {\n\t\t$horizontal: 'end';\n\t} @else if $horizontal == 'middle' {\n\t\t$horizontal: 'center';\n\t} @else if $horizontal == 'full' {\n\t\t$horizontal: 'stretch';\n\t}\n\n\t@if $vertical == 'top' {\n\t\t$vertical: 'start';\n\t} @else if $vertical == 'bottom' {\n\t\t$vertical: 'end';\n\t} @else if $vertical == 'middle' {\n\t\t$vertical: 'center';\n\t} @else if $vertical == 'full' {\n\t\t$vertical: 'stretch';\n\t}\n\n\t@if $horizontal != null {\n\t\tjustify-self: string.unquote($horizontal);\n\t}\n\n\t@if $vertical != null {\n\t\talign-self: string.unquote($vertical);\n\t}\n}\n\n\n\n/**\n * @namespace Grid:gutter-value\n */\n\n/**\n * Returns the value of the defined distance between two columns/rows for a breakpoint.\n *\n * The main usage for this is, to define a property value based on the current gutter.\n * This is why the parameter order may seem flipped, but usually, you'd use this inside a breakpoint\n * using auto-breakpoint detection, primarily rather working with the value itself. For other cases:\n * Remember, that that you can simply use named parameters.\n *\n * @memberof Grid:gutter-value\n * @function\n * @name gutter-value\n * @alias gutter-value\n *\n * @param {String} [$direction='horizontal'] - either \"horizontal\" or \"vertical\", determines the gutter direction in the grid\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @returns {Number} the determined gutter value with applied factor and/or addition\n * @throws error if no gutter value could be determined, based on given breakpoint and/or direction\n *\n * @example\n * \\@include breakpoint(medium){\n *   padding-left: gutter-value() * 0.5;\n * }\n * margin-top: gutter-value($direction:'vertical', $breakpoint:'small');\n */\n@function gutter-value($direction:'horizontal', $breakpoint:'auto'){\n\t$gutter: map.get($jig---grid-config, 'gutters', $direction);\n\t$res: null;\n\n\t@if $gutter != null {\n\t\t@if meta.type-of($gutter) == 'map' {\n\t\t\t$res: breakpoints.breakpoint-value($gutter, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $gutter;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'jig:gutter-value | could not resolve gutter, check direction and/or breakpoint';\n\t}\n\n\t@return $res;\n}\n","/**\n * @namespace Breakpoints\n */\n\n\n\n@use 'sass:meta';\n@use 'sass:list';\n@use 'sass:map';\n\n@use 'globals' as *;\n@use 'util';\n\n\n\n$jig---auto-breakpoint: list.nth(map.keys($jig---breakpoint-config), 1);\n\n\n\n/**\n * @namespace Breakpoints:get-auto-breakpoint\n */\n\n/**\n * Returns the current auto breakpoint value.\n *\n * @memberof Breakpoints:get-auto-breakpoint\n * @function\n * @name get-auto-breakpoint\n * @alias get-auto-breakpoint\n *\n * @returns {String} the name of the current named auto breakpoint\n *\n * @see set-auto-breakpoint\n * @see reset-auto-breakpoint\n *\n * @example\n * get-auto-breakpoint()\n *   => 'medium'\n */\n@function get-auto-breakpoint(){\n\t@return $jig---auto-breakpoint;\n}\n\n\n\n/**\n * @namespace Breakpoints:set-auto-breakpoint\n */\n\n/**\n * Sets the auto breakpoint to a named breakpoint value.\n * Hint: in Sass we do _not_ have to do this manually, if we want to use auto breakpoint values,\n * since blocks are always evaluated _after_ the block mixin around the block, which results\n * in the block knowing the breakpoint value automatically from the mixin around it.\n *\n * @memberof Breakpoints:set-auto-breakpoint\n * @function\n * @name set-auto-breakpoint\n * @alias set-auto-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @throws error if breakpoint is unknown\n *\n * @see reset-auto-breakpoint\n\n * @example\n * \\@include set-auto-breakpoint(medium);\n * \\@include breakpoint(medium){\n *   ...\n * }\n */\n@mixin set-auto-breakpoint($breakpoint){\n\t@if map.has-key($jig---breakpoint-config, $breakpoint) {\n\t\t$jig---auto-breakpoint: $breakpoint !global;\n\t} @else {\n\t\t@error 'jig:set-current-breakpoint | unknown named breakpoint \"#{$breakpoint}\"';\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:reset-auto-breakpoint\n */\n\n/**\n * Resets the auto breakpoint to the first/smallest named breakpoint defined in the jig config.\n * Hint: this is automatically called at the end of the breakpoint mixin, so usually you should be fine\n * never calling this manually\n *\n * @memberof Breakpoints:reset-auto-breakpoint\n * @function\n * @name reset-auto-breakpoint\n * @alias reset-auto-breakpoint\n *\n * @see set-auto-breakpoint\n\n * @example\n * \\@include reset-auto-breakpoint();\n */\n@mixin reset-auto-breakpoint(){\n\t$jig---auto-breakpoint: list.nth(map.keys($jig---breakpoint-config), 1) !global;\n}\n\n\n\n/**\n * @namespace Breakpoints:is-named-breakpoint\n */\n\n/**\n * Returns if the given breakpoint is a registered named breakpoint to be found in the jig config.\n *\n * @memberof Breakpoints:is-named-breakpoint\n * @function\n * @name is-named-breakpoint\n * @alias is-named-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @returns {Boolean} true if breakpoint is a registered named breakpoint name\n *\n * @example\n * is-named-breakpoint(medium)\n *   => true\n */\n@function is-named-breakpoint($breakpoint){\n\t@return map.has-key($jig---breakpoint-config, $breakpoint);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-range\n */\n\n/**\n * Returns a string to be used in a media query, which defines the range/bounds of a breakpoint with\n * min and/or max value.\n *\n * @memberof Breakpoints:build-breakpoint-range\n * @function\n * @name build-breakpoint-range\n * @alias build-breakpoint-range\n *\n * @param {?Number} [$min=null] - the min width of the breakpoint\n * @param {?Number} [$max=null] - the max width of the breakpoint\n * @returns {String} the media query string for the breakpoint range\n *\n * @example\n * build-breakpoint-range(0, 767px)\n *   => '(min-width: 0) and (max-width: 767px)'\n * build-breakpoint-range(null, 100rem)\n *   => '(max-width: 100rem)'\n */\n@function build-breakpoint-range($min:null, $max:null){\n\t@return util.str-join(\n\t\t[\n\t\t\tif($min != null, '(min-width: #{$min})', null),\n\t\t\tif($max != null, '(max-width: #{$max})', null)\n\t\t],\n\t\t' and '\n\t);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-query\n */\n\n/**\n * Constructs a query to be used in a media query, based on a breakpoint definition.\n * Also automatically converts values to rem.\n *\n * Directions in composite definitions may be \"up\", \"down\" or \"only\".\n *\n * You may also define the special breakpoints \"landscape\" or \"portrait\" to cover device orientations.\n *\n * @memberof Breakpoints:build-breakpoint-query\n * @function\n * @name build-breakpoint-query\n * @alias build-breakpoint-query\n *\n * @param {?Number|Literal|List<String>} [$breakpoint-definition=0] - either a simple number or a composite definition of width and direction, where the width may either be a number or a name defined in the named breakpoints\n * @returns {String} the media query string for the breakpoint definition\n * @throws error if named breakpoint is unknown\n * @throws error if an unnamed breakpoint has an \"only\" direction\n *\n * @example\n * build-breakpoint-query(200rem)\n *   => '(min-width: 200rem)'\n * build-breakpoint-query(small down)\n *   => '(max-width: 199rem)'\n * build-breakpoint-query(('large' 'only'))\n *   => '(min-width: 200rem) and (max-width: 499rem)'\n * build-breakpoint-query(1024px only)\n *   => '(min-width: 64rem) and (max-width: 64rem)'\n * build-breakpoint-query(landscape)\n *   => '(orientation: landscape)'\n */\n@function build-breakpoint-query($breakpoint-definition:0){\n\t$breakpoint: if($breakpoint-definition and (list.length($breakpoint-definition) > 0), list.nth($breakpoint-definition, 1), 0);\n\t$direction: if($breakpoint-definition and (list.length($breakpoint-definition) > 1), list.nth($breakpoint-definition, 2), 'up');\n\t$breakpoint-name: null;\n\t$next-breakpoint: null;\n\t$min: null;\n\t$max: null;\n\t$query-em-conversion-base: 16px; // this is always 16px, no matter what is defined on <html>\n\n\t@if $breakpoint == 'overwrite' {\n\t\t@return '(min-width: 0)';\n\t} @else if ($breakpoint == 'landscape') or ($breakpoint == 'portrait') {\n\t\t@return '(orientation: #{$breakpoint})';\n\t} @else if meta.type-of($breakpoint) == 'string' {\n\t\t@if is-named-breakpoint($breakpoint) {\n\t\t\t$breakpoint-name: $breakpoint;\n\t\t\t$breakpoint: map.get($jig---breakpoint-config, $breakpoint-name);\n\t\t\t$next-breakpoint: util.map-next($jig---breakpoint-config, $breakpoint-name);\n\t\t} @else {\n\t\t\t@error 'jig:build-breakpoint-query | \"#{$breakpoint-definition}\" is not a defined breakpoint';\n\t\t}\n\t}\n\n\t@if ($breakpoint-name == null) and ($direction == 'only') {\n\t\t@error 'jig:build-breakpoint-query | only named media queries can have an \"only\" range';\n\t}\n\n\t// we are building media queries with em instead of rem and px\n\t// why? => https://zellwk.com/blog/media-query-units/\n\n\t@if ($direction == 'only') or ($direction == 'up') {\n\t\t$min: util.to-em($breakpoint, $query-em-conversion-base);\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'down') {\n\t\t@if $breakpoint-name == null {\n\t\t\t$max: util.to-em($breakpoint, $query-em-conversion-base);\n\t\t} @else if $next-breakpoint != null {\n\t\t\t$max: util.to-em($next-breakpoint, $query-em-conversion-base) - util.to-em(1px, $query-em-conversion-base);\n\t\t}\n\t}\n\n\t@if ($min == 0) and ($max == null){\n\t\t$min: null;\n\t}\n\n\t@return build-breakpoint-range($min, $max);\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint\n */\n\n/**\n * Renders media queries based one one or more breakpoint definitions.\n *\n * @memberof Breakpoints:breakpoint\n * @function\n * @name breakpoint\n * @alias breakpoint\n *\n * @param {Number|Literal|List<String>|List<Literal>|List<List<String>>} $breakpoint-definitions - a list of breakpoint definitions according to build-breakpoint-query\n *\n * @example\n * \\@include breakpoint(small){\n *   ...\n * }\n * \\@include breakpoint(small down, large up){\n *   ...\n * }\n */\n@mixin breakpoint($breakpoint-definitions...){\n\t@each $breakpoint-definition in $breakpoint-definitions {\n\t\t$query: build-breakpoint-query($breakpoint-definition);\n\t\t$breakpoint: if(list.length($breakpoint-definition) > 0, list.nth($breakpoint-definition, 1), 0);\n\t\t$direction: if(list.length($breakpoint-definition) > 1, list.nth($breakpoint-definition, 2), 'up');\n\t\t$breakpoint-index: index(map.keys($jig---breakpoint-config), list.nth($breakpoint-definition, 1));\n\t\t$print-breakpoint-index: list.index(map.keys($jig---breakpoint-config), $jig---print-breakpoint);\n\n\t\t// set current breakpoint var to mixin breakpoint value to allow for auto-evaluation inside\n\t\t@if is-named-breakpoint($breakpoint){\n\t\t\t@include set-auto-breakpoint($breakpoint);\n\t\t}\n\n\t\t@if $query == '' {\n\t\t\t@content;\n\t\t} @else {\n\t\t\t@if(\n\t\t\t\t($breakpoint-index != null)\n\t\t\t\tand (\n\t\t\t\t\t($breakpoint-index <= $print-breakpoint-index)\n\t\t\t\t\tor ($direction == 'down')\n\t\t\t\t)\n\t\t\t){\n\t\t\t\t@media print, screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@media screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// restore initial value after mixin has been rendered\n\t\t@include reset-auto-breakpoint();\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint-value\n */\n\n/**\n * Search for a value, defined for a breakpoint, in a given map of values.\n * The function escalates in a mobile-first manner. So we take the value for the smallest breakpoint\n * and step up the breakpoints one by one until we reach the defined breakpoint. So, if we want the\n * according value for \"large\", but we only have a value for \"medium\", we'll get the \"medium\" value, which,\n * in mobile-first manner, escalates upwards and is the \"large\" value if nothing else is defined.\n *\n * @memberof Breakpoints:breakpoint-value\n * @function\n * @name breakpoint-value\n * @alias breakpoint-value\n *\n * @param {*|Map} $value - a map of breakpoint-keyed map of values, or a simple value\n * @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named breakpoints\n * @returns {*|null} the breakpoint value or null if nothing was found\n * @throws error if named breakpoint is unknown\n *\n * @example\n * breakpoint-value(\n *   (\n *     'small' : 10px,\n *     'medium' : 20px\n *   ),\n *   large\n * )\n *   => 20px\n */\n@function breakpoint-value($value, $breakpoint:'auto'){\n\t@if ($breakpoint != 'auto') and not map.has-key($jig---breakpoint-config, $breakpoint) {\n\t\t@error 'jig:breakpoint-value | given breakpoint \"#{$breakpoint}\" not defined';\n\t}\n\n\t@if meta.type-of($value) == 'map' {\n\t\t$res: null;\n\n\t\t@if $breakpoint == 'auto' {\n\t\t\t$breakpoint: get-auto-breakpoint();\n\t\t}\n\n\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t$breakpoint-value: map.get($value, $breakpoint-name);\n\n\t\t\t@if $breakpoint-value != null {\n\t\t\t\t$res: $breakpoint-value;\n\t\t\t}\n\n\t\t\t@if $breakpoint-name == $breakpoint {\n\t\t\t\t@return $res;\n\t\t\t}\n\t\t}\n\n\t\t@return null;\n\t} @else {\n\t\t@return $value;\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attributes-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attributes for defined breakpoints.\n *\n * Definitions will be rendered together if possible, minimizing the amount of media queries.\n * However, each call of this mixin will, most likely, render multiple media queries, so keep a close eye\n * on your media query structure to avoid unnecessarily doubled definitions and keep media queries to a minimum.\n * If in doubt, it might be a better idea to write the queries manually, perhaps rather using `map.get` or\n * `breakpoint-value` to automatically pull values from breakpoint value maps.\n *\n * @memberof Breakpoints:attributes-for-breakpoints\n * @function\n * @name attributes-for-breakpoints\n * @alias attributes-for-breakpoints\n *\n * @see attribute-for-breakpoints\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @example\n * \\@include attributes-for-breakpoints(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : (\n *       'small' : 1,\n *       'large' : 1.25\n *     ),\n *     'margin-top' : (\n *       'small' : 10px,\n *       'medium' : 20px\n *     )\n *   ),\n *   2.0\n * );\n */\n@mixin attributes-for-breakpoints($attributes, $factor:null){\n\t$attributes-for-breakpoints: ();\n\t@each $attribute-name, $attribute-value in $attributes {\n\t\t@if meta.type-of($attribute-value) != 'map' {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t} @else {\n\t\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t\t$breakpoint-value: map.get($attribute-value, $breakpoint-name);\n\t\t\t\t@if $breakpoint-value != null {\n\t\t\t\t\t$breakpoint-attributes: map.get($attributes-for-breakpoints, $breakpoint-name);\n\t\t\t\t\t@if $breakpoint-attributes == null {\n\t\t\t\t\t\t$breakpoint-attributes: ();\n\t\t\t\t\t}\n\n\t\t\t\t\t$breakpoint-attributes: map.merge(\n\t\t\t\t\t\t$breakpoint-attributes,\n\t\t\t\t\t\t($attribute-name : $breakpoint-value)\n\t\t\t\t\t);\n\n\t\t\t\t\t$attributes-for-breakpoints: map.merge(\n\t\t\t\t\t\t$attributes-for-breakpoints,\n\t\t\t\t\t\t($breakpoint-name : $breakpoint-attributes)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t$breakpoint-attributes: map.get($attributes-for-breakpoints, $breakpoint-name);\n\t\t@if ($breakpoint-attributes != null) and (list.length(map.keys($breakpoint-attributes)) > 0) {\n\t\t\t@include breakpoint($breakpoint-name){\n\t\t\t\t@each $attribute-name, $attribute-value in $breakpoint-attributes {\n\t\t\t\t\t@if $factor == null {\n\t\t\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attribute-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attribute for defined breakpoints.\n *\n * This is the single attribute version of `attributes-for-breakpoints`.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @memberof Breakpoints:attribute-for-breakpoints\n * @function\n * @name attribute-for-breakpoints\n * @alias attribute-for-breakpoints\n *\n * @see attributes-for-breakpoints\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include attribute-for-breakpoints(\n *   'line-height',\n *   (\n *     'small' : 1,\n *     'large' : 1.25\n *   ),\n *   1.0\n * );\n */\n@mixin attribute-for-breakpoints($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map.merge($attributes, ('#{$attribute}' : $value));\n\t@include attributes-for-breakpoints($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attributes\n */\n\n/**\n * Use this, if you need to overwrite attribute values previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attributes\n * @function\n * @name overwrite-breakpoint-for-attributes\n * @alias overwrite-breakpoint-for-attributes\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @see overwrite-breakpoint-for-attribute\n *\n * @example\n * \\@include overwrite-breakpoint-for-attributes(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : 1.25\n *     'margin-top' : 20px\n *   ),\n *   2.0\n * );\n */\n@mixin overwrite-breakpoint-for-attributes($attributes, $factor:null){\n\t@include breakpoint('overwrite'){\n\t\t@each $attribute-name, $attribute-value in $attributes {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attribute\n */\n\n/**\n * Use this, if you need to overwrite an attribut value previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attribute\n * @function\n * @name overwrite-breakpoint-for-attribute\n * @alias overwrite-breakpoint-for-attribute\n *\n * @see overwrite-breakpoint-for-attributes\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include overwrite-breakpoint-for-attribute(font-size, 12px, 2.0);\n */\n@mixin overwrite-breakpoint-for-attribute($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map.merge($attributes, ('#{$attribute}' : $value));\n\t@include overwrite-breakpoint-for-attributes($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint\n */\n\n/**\n * Use this, if you need to overwrite something previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to redefine something statically in an override situation, which has\n * been defined responsively before.\n *\n * @memberof Breakpoints:overwrite-breakpoint\n * @function\n * @name overwrite-breakpoint\n * @alias overwrite-breakpoint\n *\n * @example\n * \\@include overwrite-breakpoint(){\n *   font-size: 12xp;\n *   margin-top: 20px;\n * }\n */\n@mixin overwrite-breakpoint(){\n\t@include breakpoint('overwrite'){\n\t\t@content;\n\t}\n}\n","/**\n * @namespace Content\n */\n\n\n\n@use 'sass:meta';\n@use 'sass:map';\n@use 'sass:list';\n\n@use 'globals' as *;\n@use 'breakpoints';\n\n\n\n/**\n * @namespace Content:content-holder\n */\n\n/**\n * Adds properties to the current element, which make it a \"content holder\", meaning, that it\n * adheres to the defined min/max content widths and keeps the content away from the browser edges by\n * defining margins according to the defined responsive content paddings.\n *\n * Min and max widths are only rendered if they are defined in the jig config, as are content paddings.\n *\n * A content holder can be used as the base container definition for non-breakout elements on a page,\n * which is not supposed to grow indefinitely horizontally.\n *\n * A content holder can be a grid container at the same time, these things do not exclude themselves and\n * are even a very common use case.\n *\n * @memberof Content:content-holder\n * @function\n * @name content-holder\n * @alias content-holder\n *\n * @param {Boolean} [$padded=true] - if true, config-defined responsive content padding gets applied to the element\n * @param {Boolean} [$centered=true] - if true, element gets auto-centered using auto margins\n *\n * @example\n * \\@include content-holder();\n */\n@mixin content-holder($padded:true, $centered:false){\n\t$breakpoint-names: map.keys($jig---breakpoint-config);\n\t$smallest-breakpoint: list.nth($breakpoint-names, 1);\n\t$largest-breakpoint: list.nth($breakpoint-names, -1);\n\n\t$min-width: content-width-value('min');\n\t$max-width: content-width-value('max');\n\n\t@if $min-width != null {\n\t\tmin-width: $min-width + (2 * content-padding-value($smallest-breakpoint));\n\t}\n\t@if $max-width != null {\n\t\tmax-width: $max-width + (2 * content-padding-value($largest-breakpoint));\n\t}\n\n\t@if $centered {\n\t\tmargin-right: auto;\n\t\tmargin-left: auto;\n\t}\n\n\t@if $padded {\n\t\t$content-padding: map.get($jig---content-config, 'padding');\n\n\t\t@if $content-padding != null {\n\t\t\t@include breakpoints.attributes-for-breakpoints((\n\t\t\t\t'padding-left' : $content-padding,\n\t\t\t\t'padding-right' : $content-padding,\n\t\t\t));\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Content:content-padding-value\n */\n\n/**\n * Returns the defined content padding for a/the current breakpoint.\n *\n * @memberof Content:content-padding-value\n * @function\n * @name content-padding-value\n * @alias content-padding-value\n *\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @returns {Number} the determined content padding value\n * @throws error if no content padding value could be determined, based on given breakpoint\n *\n * @example\n * \\@include breakpoint(medium){\n *   padding-left: content-padding-value();\n * }\n * margin-right: content-padding-value($breakpoint:'small');\n */\n@function content-padding-value($breakpoint:'auto'){\n\t$padding: map.get($jig---content-config, 'padding');\n\t$res: null;\n\n\t@if $padding != null {\n\t\t@if meta.type-of($padding) == 'map' {\n\t\t\t$res: breakpoints.breakpoint-value($padding, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $padding;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'jig:content-padding-value | could not resolve content padding, check breakpoint';\n\t}\n\n\t@return $res;\n}\n\n\n\n/**\n * @namespace Content:content-width-value\n */\n\n/**\n * Returns the defined min/max content width.\n *\n * @memberof Content:content-width-value\n * @function\n * @name content-width-value\n * @alias content-width-value\n *\n * @param {String} [$min-max='max'] - either \"min\" or \"max\", defines if min or max content-width is returned\n * @param {?Number} [$default=null] - the default value to return if the width definition cannot be found\n * @returns {Number|null} the determined content width value, may be null if width is not defined (depending on default value)\n *\n * @example\n * max-width: content-width-value();\n * min-width: content-width-value('min', 0);\n */\n@function content-width-value($min-max:'max', $default:null){\n\t$width: map.get($jig---content-config, 'max-width');\n\t@if $min-max == 'min' {\n\t\t$width: map.get($jig---content-config, 'min-width');\n\t}\n\n\t@if $width == null {\n\t\t$width: $default;\n\t}\n\n\t@return $width;\n}\n\n\n\n/**\n * @namespace Content:base-font-size-value\n */\n\n/**\n * Returns the base font size, which is most likely applied to the html/body elements and acts as the base\n * for rem calculations.\n *\n * @memberof Content:base-font-size-value\n * @function\n * @name base-font-size-value\n * @alias base-font-size-value\n *\n * @returns {Number} the currently set jig base font size value\n *\n * @example\n * font-size: base-font-size-value();\n */\n@function base-font-size-value(){\n\t@return $jig---base-font-size;\n}\n"]}