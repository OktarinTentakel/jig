{"version":3,"file":"scss-legacy.css","sources":["main.scss","../../../source/lib/normalize/index.css","defines.scss","../../../source/scss-legacy/jig/_index.scss","../../../source/scss-legacy/jig/globals.scss","../../../source/scss-legacy/jig/util.scss","../../../source/scss-legacy/jig/breakpoints.scss","../../../source/scss-legacy/jig/grid.scss","../../../source/scss-legacy/jig/spacings.scss","examples.scss"],"sourcesContent":["@import 'normalize/index';\n@import 'defines';\n@import 'jig/_index';\n@import 'examples';\n","/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n/*# sourceMappingURL=index.css.map */\n","$JIG_LAYOUT: (\n\t'breakpoints' : (\n\t\t'xsmall' : 0,\n\t\t'medium' : 768px,\n\t\t'large' : 1280px,\n\t\t'xlarge' : 1600px\n\t),\n\t'print-breakpoint' : 'large',\n\t'grid' : (\n\t\t'columns' : 12,\n\t\t'gutters' : (\n\t\t\t'horizontal' : (\n\t\t\t\t'xsmall' : 10px,\n\t\t\t\t'medium' : 20px,\n\t\t\t\t'large' : 40px\n\t\t\t),\n\t\t\t'vertical' : 20px\n\t\t)\n\t),\n\t'spacings' : (\n\t\t'xxs' : (\n\t\t\t'xsmall' : 10px\n\t\t),\n\t\t'xs' : (\n\t\t\t'xsmall' : 10px,\n\t\t\t'small' : 20px\n\t\t),\n\t\t'sm' : (\n\t\t\t'xsmall' : 20px,\n\t\t\t'large' : 30px\n\t\t),\n\t\t'md' : (\n\t\t\t'xsmall' : 30px,\n\t\t\t'xlarge' : 40px\n\t\t),\n\t\t'l' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 60px\n\t\t),\n\t\t'xl' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 50px,\n\t\t\t'large' : 80px\n\t\t),\n\t\t'xxl' : (\n\t\t\t'xsmall': 40px,\n\t\t\t'medium': 80px,\n\t\t\t'large' : 120px\n\t\t)\n\t),\n\t'content' : (\n\t\t'padding' : (\n\t\t\t'xsmall' : 15px,\n\t\t\t'small' : 35px,\n\t\t\t'medium' : 50px,\n\t\t\t'xlarge' : 60px\n\t\t),\n\t\t'min-width' : 320px - 2 * 15px,\n\t\t'max-width' : 1920px,\n\t\t'base-font-size' : 12px\n\t)\n);\n\n$GRID_CONTAINER_BACKGROUNDCOLOR: (\n\t'xsmall': lightblue,\n\t'medium': lightcyan,\n\t'large': lightgreen\n);\n","@import 'globals';\n@import 'util';\n@import 'breakpoints';\n@import 'grid';\n@import 'spacings';\n","$--jig--layout: null !default;\n@if type-of($--jig--layout) != 'map' {\n\t@if global-variable-exists('JIG_LAYOUT') {\n\t\t$--jig--layout: $JIG_LAYOUT;\n\t}\n}\n\n@if type-of($--jig--layout) != 'map' {\n\t@error 'jig ##> globals | jig layout is undefined or not a map'\n}\n\n$--jig--breakpoint-config: map-get($--jig--layout, 'breakpoints') !default;\n$--jig--breakpoint-config: (\n\t'small' : 0,\n\t'medium' : 768px,\n\t'large' : 1280px\n) !default;\n\n$--jig--grid-config: map-get($--jig--layout, 'grid') !default;\n$--jig--grid-config: (\n\t'columns' : 12,\n\t'gutters' : (\n\t\t'horizontal' : (\n\t\t\t'small' : 20px,\n\t\t\t'medium' : 40px,\n\t\t\t'large' : 40px\n\t\t),\n\t\t'vertical' : 20px\n\t)\n) !default;\n\n$--jig--spacings-config: map-get($--jig--layout, 'spacings') !default;\n$--jig--spacings-config: (\n\t'sm' : (\n\t\t'small' : 1rem,\n\t\t'medium' : 2rem,\n\t\t'large' : 3rem\n\t),\n\t'md': (\n\t\t'small' : 2rem,\n\t\t'medium' : 3rem,\n\t\t'large' : 5rem\n\t),\n\t'l': (\n\t\t'small' : 3rem,\n\t\t'medium' : 5rem,\n\t\t'large' : 8rem\n\t)\n) !default;\n\n$--jig--content-config: map-get($--jig--layout, 'content') !default;\n$--jig--content-config: (\n\t'padding' : (\n\t\t'small' : 20px,\n\t\t'medium' : 40px,\n\t\t'large' : 80px\n\t),\n\t'max-width' : 1600px,\n\t'base-font-size' : 16px\n) !default;\n\n$--jig--base-font-size: map-get($--jig--content-config, 'base-font-size') !default;\n$--jig--base-font-size: 16px !default;\n\n$--jig--print-breakpoint: map-get($--jig--layout, 'print-breakpoint') !default;\n$--jig--print-breakpoint: 'large' !default;\n","///\n/// Retrieve a value deeply nested in a map, defined by a path of keys.\n///\n/// @param {Map} $map - the map to search in\n/// @param {String|List<String>} $keys - the keys to traverse down in the map\n/// @return {*|null} the value at the defined key path or null if not defined\n///\n/// @example\n/// map-get-deep($foo-map, 'level1', 'level2')\n/// => value of $foo-map.level1.level2\n///\n@function map-get-deep($map, $keys...){\n\t@each $key in $keys {\n\t\t@if map-has-key($map, $key) {\n\t\t\t$map: map-get($map, $key);\n\t\t} @else {\n\t\t\t@return null;\n\t\t}\n\t}\n\n\t@return $map;\n}\n\n\n\n///\n/// Retrieves the value of the adjacent, next key in a map, if one exists.\n///\n/// @param {Map} $map - the map to use\n/// @param {String} $key - the current key, from which we want to go to the next\n/// @return {*|null} the value of the next key or null if there is none\n///\n/// @example\n/// map-next($fooMap, 'small')\n/// => value of $fooMap.medium\n///\n@function map-next($map, $key){\n\t$keys: map-keys($map);\n\n\t$next-index: 0;\n\t@if map-has-key($map, $key) {\n\t\t$next-index: index($keys, $key) + 1;\n\t}\n\n\t@if ($next-index == 0) or ($next-index > length($map)) {\n\t\t@return null;\n\t} @else {\n\t\t@return map-get($map, nth($keys, $next-index));\n\t}\n}\n\n\n\n///\n/// Removes the unit from a value, turning it into a unit-less value.\n///\n/// @param {Number} $number - the number to strip the unit from\n/// @return {Number} the unit-less number\n///\n/// @example\n/// strip-unit(16px)\n/// => 16\n///\n@function strip-unit($number){\n\t@return $number / ($number * 0 + 1);\n}\n\n\n\n///\n/// Convert one or more px values to (a) rem value(s), based on a base font size in px, percent or rem.\n/// If the base is in % or rem, the base will be converted to px based on the global base font size.///\n/// @param {Number|List<Number>} $values - the value(s) to convert\n/// @param {?Number} [$base=$--jig--base-font-size-px] - the base size to convert against\n/// @return {Number|List<Number>} the converted value(s)\n///\n/// @example\n/// to-rem(32px)\n/// => 2rem\n/// to-rem([10px, 20px, 40px], 20px)\n/// => [0.5rem, 1rem, 2rem]\n///\n@function to-rem($values, $base:$--jig--base-font-size){\n\t@if unit($base) == '%' {\n\t\t$base: ($base / 100%) * $--jig--base-font-size;\n\t}\n\n\t@if unit($base) == 'rem' {\n\t\t$base: strip-unit($base) * $--jig--base-font-size;\n\t}\n\n\t@if type-of($values) != 'list' {\n\t\t$values: [$values];\n\t}\n\n\t$rem-values: [];\n\t@each $value in $values {\n\t\t$rem-value: 0;\n\t\t@if unit($value) == 'em' {\n\t\t\t$rem-value: strip-unit($value);\n\t\t} @else {\n\t\t\t$rem-value: strip-unit($value) / strip-unit($base);\n\t\t}\n\t\t@if $rem-value != 0 {\n\t\t\t$rem-value: $rem-value * 1rem;\n\t\t}\n\t\t$rem-values: append($rem-values, $rem-value);\n\t}\n\n\t@if length($rem-values) == 1 {\n\t\t@return nth($rem-values, 1);\n\t} @else {\n\t\t@return $rem-values;\n\t}\n}\n\n\n\n///\n/// Join/concatenate two or more strings with an optional glue string.\n///\n/// @param {String|List<String>} $strings - the strings to join\n/// @param {String} $glue - the string to put between joined strings\n/// @return {String} the joined string\n///\n/// str-join(['fo', 'ar'], 'ob')\n/// => 'foobar'\n///\n@function str-join($strings, $glue:''){\n\t$strings: join([], $strings);\n\n\t$res: '';\n\t@each $string in $strings {\n\t\t@if $string {\n\t\t\t$res: $res+$string+$glue;\n\t\t}\n\t}\n\n\t@if ($res != '') and ($glue != '') {\n\t\t@return str-slice($res, 1, str-length($glue) * -1);\n\t} @else {\n\t\t@return $res;\n\t}\n}\n","$--jig--current-breakpoint: nth(map-keys($--jig--breakpoint-config), 1);\n\n\n\n///\n/// Returns a string to be used in a media query, which defines the range/bounds of a breakpoint with\n/// min and/or max value.\n///\n/// @param {?Number} [$min=null] - the min width of the breakpoint\n/// @param {?Number} [$max=null] - the max width of the breakpoint\n/// @return {String} the media query string for the breakpoint range\n///\n/// @example\n/// build-breakpoint-range(0, 767px)\n/// => '(min-width: 0) and (max-width: 767px)'\n/// build-breakpoint-range(null, 100rem)\n/// => '(max-width: 100rem)'\n///\n@function build-breakpoint-range($min:null, $max:null){\n\t@return str-join(\n\t\t[\n\t\t\tif($min != null, '(min-width: #{$min})', null),\n\t\t\tif($max != null, '(max-width: #{$max})', null)\n\t\t],\n\t\t' and '\n\t);\n}\n\n\n\n///\n/// Constructs a query to be used in a media query, based on a breakpoint definition.\n/// Also automatically converts values to rem.\n///\n/// Directions in composite definitions may be \"up\", \"down\" or \"only\".\n///\n/// You may also define the special breakpoints \"landscape\" or \"portrait\" to cover device orientations.\n///\n/// @param {?Number|Literal|List<String>} [$breakpoint-definition=0] - either a simple number or a composite definition of width and direction, where the width may either be a number or a name defined in the named layout breakpoints\n/// @return {String} the media query string for the breakpoint definition\n///\n/// @example\n/// build-breakpoint-query(200rem)\n/// => '(min-width: 200rem)'\n/// build-breakpoint-query(small down)\n/// => '(max-width: 199rem)'\n/// build-breakpoint-query(['large' 'only'])\n/// => '(min-width: 200rem) and (max-width: 499rem)'\n/// build-breakpoint-query(1024px only)\n/// => '(min-width: 64rem) and (max-width: 64rem)'\n/// build-breakpoint-query(landscape)\n/// => '(orientation: landscape)'\n///\n@function build-breakpoint-query($breakpoint-definition:0){\n\t$breakpoints: $--jig--breakpoint-config;\n\t$breakpoint: if($breakpoint-definition, nth($breakpoint-definition, 1), 0);\n\t$direction: if($breakpoint-definition and (length($breakpoint-definition) > 1), nth($breakpoint-definition, 2), 'up');\n\t$breakpoint-name: null;\n\t$next-breakpoint: null;\n\t$min: null;\n\t$max: null;\n\n\t@if ($breakpoint == 'landscape') or ($breakpoint == 'portrait') {\n\t\t@return '(orientation: #{$breakpoint})';\n\t} @else if type-of($breakpoint) == 'string' {\n\t\t@if map-has-key($breakpoints, $breakpoint) {\n\t\t\t$breakpoint-name: $breakpoint;\n\t\t\t$breakpoint: map-get($breakpoints, $breakpoint-name);\n\t\t\t$next-breakpoint: map-next($breakpoints, $breakpoint-name);\n\t\t} @else {\n\t\t\t@error 'build-breakpoint-query | \"#{$breakpoint-definition}\" is not a defined breakpoint';\n\t\t}\n\t}\n\n\t@if ($breakpoint-name == null) and ($direction == 'only') {\n\t\t@error 'build-breakpoint-query | only named media queries can have an \"only\" range';\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'up') {\n\t\t$min: to-rem($breakpoint, 16px);\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'down') {\n\t\t@if $breakpoint-name == null {\n\t\t\t$max: to-rem($breakpoint, 16px);\n\t\t} @else if $next-breakpoint != null {\n\t\t\t$max: to-rem($next-breakpoint, 16px) - to-rem(1px, 16px);\n\t\t}\n\t}\n\n\t@return build-breakpoint-range($min, $max);\n}\n\n\n\n///\n/// Renders media queries based one one or more breakpoint definitions.\n///\n/// @param {?Number|Literal|List<String>|List<Literal>|List<List<String>>} $breakpoint-definitions - a list of breakpoint definitions according to build-breakpoint-query\n///\n/// @see build-breakpoint-query\n/// @example\n/// breakpoint(small)\n/// breakpoint(small down, large up)\n///\n@mixin breakpoint($breakpoint-definitions...){\n\t$breakpoints: $--jig--breakpoint-config;\n\n\t@each $breakpoint-definition in $breakpoint-definitions {\n\t\t$query: build-breakpoint-query($breakpoint-definition);\n\t\t$breakpoint-index: index(map-keys($breakpoints), nth($breakpoint-definition, 1));\n\t\t$print-breakpoint-index: index(map-keys($breakpoints), $--jig--print-breakpoint);\n\t\t$direction: if(length($breakpoint-definition) > 1, nth($breakpoint-definition, 2), 'up');\n\t\t$pre-current-breakpoint: null;\n\n\t\t@if global-variable-exists('--jig--current-breakpoint') {\n\t\t\t$pre-current-breakpoint: $--jig--current-breakpoint;\n\t\t}\n\t\t$--jig--current-breakpoint: nth($breakpoint-definition, 1) !global;\n\n\t\t@if $query == '' {\n\t\t\t@content;\n\t\t} @else {\n\t\t\t@if(\n\t\t\t\t($breakpoint-index != null)\n\t\t\t\tand (\n\t\t\t\t\t($breakpoint-index <= $print-breakpoint-index)\n\t\t\t\t\tor ($direction == 'down')\n\t\t\t\t)\n\t\t\t){\n\t\t\t\t@media print, screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@media screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$--jig--current-breakpoint: $pre-current-breakpoint !global;\n\t}\n}\n\n\n\n///\n/// Search for a value, defined for a breakpoint, in a given map of values.\n/// The function escalates in a mobile-first manner. So we take the value for the smallest breakpoint\n/// and step up the breakpoints one by one until we reach the defined breakpoint. So, if we want the\n/// according value for \"large\", but we only have a value for \"medium\", we'll get the \"medium\" value, which,\n/// in mobile-first, escalates upwards and is the \"large\" value if nothing else is defined.\n///\n/// @param {*|Map} $value - a map of breakpoint-keyed map of values\n/// @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named layout breakpoints\n/// @return {*|null} the breakpoint value or null if nothing was found\n///\n@function breakpoint-value($value, $breakpoint:auto){\n\t$breakpoints: $--jig--breakpoint-config;\n\t@if not map-has-key($breakpoints, $breakpoint) {\n\t\t@error 'breakpoint-value | given breakpoint \"#{$breakpoint}\" not defined';\n\t}\n\n\t@if type-of($value) == 'map' {\n\t\t$res: null;\n\n\t\t@if $breakpoint == auto {\n\t\t\t$breakpoint: $--jig--current-breakpoint;\n\t\t}\n\n\t\t@each $breakpoint-name, $breakpoint-definition in $breakpoints {\n\t\t\t$breakpoint-value: map-get($value, $breakpoint-name);\n\n\t\t\t@if $breakpoint-value != null {\n\t\t\t\t$res: $breakpoint-value;\n\t\t\t}\n\n\t\t\t@if $breakpoint-name == $breakpoint {\n\t\t\t\t@return $res;\n\t\t\t}\n\t\t}\n\n\t\t@return null;\n\t} @else {\n\t\t@return $value;\n\t}\n}\n\n\n\n///\n/// Renders attribute values for given attributes for defined breakpoints.\n///\n/// Definitions will be rendered together if possible, minimizing the amount of media queries.\n/// However, each call of this mixin will, most likely, render multiple media queries, so keep a close eye\n/// on your media query structure to avoid unnecessarily doubled definitions and keep media queries to a minimum.\n/// If in doubt, it might be a better idea to write the queries manually, perhaps rather using `map-get` or\n/// `breakpoint-value` to automatically pull values from breakpoint value maps.\n///\n/// @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n/// @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n///\n/// @example\n/// attributes-for-breakpoints(\n///   (\n///     'font-size' : 12px,\n///     'line-height' : (\n///       'small' : 1,\n///       'large' : 1.25\n///     ),\n///     'margin-top' : (\n///       'small' : 10px,\n///       'medium' : 20px\n///     )\n///   ),\n///   2.0\n/// )\n///\n@mixin attributes-for-breakpoints($attributes, $factor:null){\n\t$breakpoints: $--jig--breakpoint-config;\n\n\t$attributes-for-breakpoints: ();\n\t@each $attribute-name, $attribute-value in $attributes {\n\t\t@if type-of($attribute-value) != 'map' {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t} @else {\n\t\t\t@each $breakpoint-name, $breakpoint-definition in $breakpoints {\n\t\t\t\t$breakpoint-value: map-get($attribute-value, $breakpoint-name);\n\t\t\t\t@if $breakpoint-value != null {\n\t\t\t\t\t$breakpoint-attrs: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t\t\t\t@if $breakpoint-attrs == null {\n\t\t\t\t\t\t$breakpoint-attrs: ();\n\t\t\t\t\t}\n\n\t\t\t\t\t$breakpoint-attrs: map-merge($breakpoint-attrs, ($attribute-name : $breakpoint-value));\n\t\t\t\t\t$attributes-for-breakpoints: map-merge($attributes-for-breakpoints, ($breakpoint-name : $breakpoint-attrs));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@each $breakpoint-name, $breakpoint-definition in $breakpoints {\n\t\t$breakpoint-attrs: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t@if ($breakpoint-attrs != null) and (length(map-keys($breakpoint-attrs)) > 0) {\n\t\t\t@include breakpoint($breakpoint-name){\n\t\t\t\t@each $attribute-name, $attribute-value in $breakpoint-attrs {\n\t\t\t\t\t@if $factor == null {\n\t\t\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n///\n/// Renders attribute values for given attribute for defined breakpoints.\n///\n/// This is the single attribute version of `attributes-for-breakpoints`.\n/// Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n/// if you'll definitely only have one attribute to be defined in multiple breakpoints.\n///\n/// @param {String} $attribute - the name of the attribute you want to set\n/// @param {*} $value - the value to set the attribute to\n/// @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n///\n/// @example\n/// attribute-for-breakpoints(\n///   'line-height',\n///   (\n///     'small' : 1,\n///     'large' : 1.25\n///   )\n/// )\n///\n@mixin attribute-for-breakpoints($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $value));\n\t@include attributes-for-breakpoints($attributes, $factor);\n}\n\n\n\n///\n/// Use this, if you need to overwrite attribute values previously defined in (a) breakpoint(s).\n///\n/// A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n/// breakpoint-based font-size definition.\n///\n/// @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n/// @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n///\n/// @example\n/// overwrite-breakpoint-for-attributes(\n///   (\n///     'font-size' : 12px,\n///     'line-height' : 1.25\n///     'margin-top' : 20px\n///   ),\n///   2.0\n/// )\n///\n@mixin overwrite-breakpoint-for-attributes($attributes, $factor:null){\n\t@include breakpoint(0){\n\t\t@each $attribute-name, $attribute-value in $attributes {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: $factor * $attribute-value;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n///\n/// Use this, if you need to overwrite an attribut value previously defined in (a) breakpoint(s).\n///\n/// A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n/// breakpoint-based font-size definition.\n///\n/// @param {String} $attribute - the name of the attribute you want to set\n/// @param {*} $value - the value to set the attribute to\n/// @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n///\n/// @example\n/// overwrite-breakpoint-for-attribute(\n///   font-size,\n///   12px,\n///   2.0\n/// )\n///\n@mixin overwrite-breakpoint-for-attributes($attribute, $value, $factor:null){\n\t@include breakpoint(0){\n\t\t@if $factor == null {\n\t\t\t#{$attribute}: $value;\n\t\t} @else {\n\t\t\t#{$attribute}: $factor * $value;\n\t\t}\n\t}\n}\n\n\n\n///\n/// Use this, if you need to overwrite an attribute value previously defined in (a) breakpoint(s).\n///\n/// A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n/// breakpoint-based font-size definition.\n///\n/// @example\n/// overwrite-breakpoints(){\n///   font-size: 12xp;\n///   margin-top: 20px;\n/// }\n///\n@mixin overwrite-breakpoints(){\n\t@include breakpoint(0){\n\t\t@content;\n\t}\n}\n","///\n/// Renders the basic properties of a grid container, which is the bracket element for elements, which are\n/// to be placed in a grid, thereby making the container, more or less, \"the grid itself\".\n///\n/// The basic characteristic of this container is the pre-definition of usable grid columns, according to our\n/// layout definition.\n///\n@mixin grid-container(){\n\tdisplay: grid;\n\tgrid-auto-flow: row;\n\tgrid-template-columns: repeat(map-get($--jig--grid-config, 'columns'), 1fr);\n\t@include attributes-for-breakpoints((\n\t\t'grid-column-gap' : map-get-deep($--jig--grid-config, 'gutters', 'horizontal'),\n\t\t'grid-row-gap' : map-get-deep($--jig--grid-config, 'gutters', 'vertical')\n\t));\n}\n\n\n\n///\n/// Renders the basic properties of a grid item, which is an item inside a grid, being placed according to\n/// pre-defined columns.\n///\n/// The main purpose of this mixin is, to define the space, the item takes inside the grid. To do this, there are\n/// several means of definition. Either just giving it a column-based width, aligning it at the end of other,\n/// already existing items, or defining a specific area it should cover, by explicitly defining a start and end column\n/// or a combination of both.\n///\n/// Additionally, the item may also be defined to take up more than one row, adding the native grid capabilities to\n/// our concepts.\n///\n/// @param {?Number} [$span=null] - the width of the item in columns\n/// @param {?Number} [$start=null] - the horizontal start offset of the item in columns, may be combined with $end or $span\n/// @param {?Number} [$end=null] - the horizontal end offset of the item in columns, may be combined with $start or $span\n/// @param {?Number} [$row-span=null] - the height of the item in rows\n/// @param {?Number} [$row-start=null] - the vertical start offset of the item in rows, may be combined with $row-end or $row-span\n/// @param {?Number} [$row-end=null] - the vertical end offset of the item in rows, may be combined with $row-start or $row-span\n///\n/// @example\n/// grid-item(12)\n/// grid-item(6, 6)\n/// grid-item(null, 2, 2)\n/// grid-item(6, null, null, 2)\n/// grid-item(6, null, null, null, 0, 5)\n///\n@mixin grid-item(\n\t$span:null,\n\t$start:null,\n\t$end:null,\n\t$row-span:null,\n\t$row-start:null,\n\t$row-end:null\n){\n\t$columns: map-get($--jig--grid-config, 'columns');\n\n\t@if ($span == null) and ($start == null) {\n\t\tgrid-column-end: span $columns;\n\t} @else {\n\t\t@if $span != null {\n\t\t\tgrid-column-end: span $span;\n\t\t}\n\n\t\t@if $start != null {\n\t\t\tgrid-column-start: $start + 1;\n\t\t}\n\n\t\t@if ($end != null) and ($span == null) {\n\t\t\tgrid-column-end: $end + 1;\n\t\t}\n\t}\n\n\t@if ($row-span != null) or ($row-start != null) {\n\t\t@if $row-span != null {\n\t\t\tgrid-row-end: span $row-span;\n\t\t}\n\n\t\t@if $row-start != null {\n\t\t\tgrid-row-start: $row-start + 1;\n\t\t}\n\n\t\t@if ($row-end != null) and ($row-span == null) {\n\t\t\tgrid-row-end: $row-end + 1;\n\t\t}\n\t}\n}\n\n\n\n///\n/// Renders properties of a grid item, to define the item's alignment inside the area defined for the item using\n/// the grid-item mixin. The usage of this only make sense for grid items.\n///\n/// @param {String} [$horizontal=null] - \"left\"/\"start\", \"right\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n/// @param {String} [$vertical=null] - \"top\"/\"start\", \"bottom\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n///\n/// @example\n/// grid-item-align('left')\n/// grid-item-align('center', 'center')\n/// grid-item-align(null, 'full')\n///\n@mixin grid-item-align($horizontal:null, $vertical:null){\n\t@if $horizontal == 'left' {\n\t\t$horizontal: 'start';\n\t} @else if $horizontal == 'right' {\n\t\t$horizontal: 'end';\n\t} @else if $horizontal == 'middle' {\n\t\t$horizontal: 'center';\n\t} @else if $horizontal == 'full' {\n\t\t$horizontal: 'stretch';\n\t}\n\n\t@if $vertical == 'top' {\n\t\t$vertical: 'start';\n\t} @else if $vertical == 'bottom' {\n\t\t$vertical: 'end';\n\t} @else if $vertical == 'middle' {\n\t\t$vertical: 'center';\n\t} @else if $vertical == 'full' {\n\t\t$vertical: 'stretch';\n\t}\n\n\t@if $horizontal != null {\n\t\tjustify-self: unquote($horizontal);\n\t}\n\n\t@if $vertical != null {\n\t\talign-self: unquote($vertical);\n\t}\n}\n\n\n\n///\n/// Returns the value of the defined distance between two columns/rows for a breakpoint.\n///\n/// The main usage for this is, to define a property value based on the current gutter.\n/// This is why the parameter order may seem flipped, but usually, you'd use this inside a breakpoint\n/// using auto-breakpoint detection, primarily rather working with the value itself. For other cases:\n/// Remember, that that you can simply use named parameters.\n///\n/// @param {Number} [$factor=1.0] - factor to apply to the finally evaluated gutter value, most helpful to get half a gutter for example\n/// @param {Number} [$add=0] - value to add to the finally evaluated gutter value, may also be negative to subtract\n/// @param {String} [$direction='horizontal'] - either \"horizontal\" or \"vertical\", determines the gutter direction in the grid\n/// @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n/// @return {Number} the determined gutter value with applied factor and/or addition\n///\n/// @example\n/// padding-left: gutter-value(0.5);\n/// margin-top: gutter-value($direction:'vertical', $breakpoint:'small');\n///\n@function gutter-value($factor:1.0, $add:0, $direction:'horizontal', $breakpoint:auto){\n\t$gutter: map-get-deep($--jig--grid-config, 'gutters', $direction);\n\t$res: null;\n\n\t@if $breakpoint == auto {\n\t\t$breakpoint: $--jig--current-breakpoint;\n\t}\n\n\t@if $gutter != null {\n\t\t@if type-of($gutter) == 'map' {\n\t\t\t$res: breakpoint-value($gutter, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $gutter;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'gutter-value | could not resolve gutter, check direction and/or breakpoint';\n\t}\n\n\t@return ($res * $factor) + $add;\n}\n","///\n/// Return a spacing value defined in the jig layout config, based on a breakpoint.\n///\n/// @param {String} $size - on of the named sized defined in jig's spacing config (sm, l, xxl, ...)\n/// @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named layout breakpoints\n/// @return {Number|null} the spacing value or null if nothing was found\n///\n/// @example\n/// spacing-value(sm)\n/// => 12px\n/// spacing-value(md, large)\n/// => 5rem\n///\n@function spacing-value($size, $breakpoint:auto){\n\t$spacing: map-get($--jig--spacings-config, $size);\n\n\t@if $spacing == null {\n\t\t@error 'spacing-value | unknown size \"#{$size}\"';\n\t}\n\n\t@if type-of($spacing) == 'map' {\n\t\t@return breakpoint-value($spacing, $breakpoint);\n\t} @else {\n\t\t@return $spacing;\n\t}\n}\n\n\n\n///\n/// Define (an) attribute(s) based on breakpoint-dependent spacing values.\n/// This will render the given attributes with the corresponding spacing values for each defined breakpoint\n/// in compiled media queries. Since this will result in many media queries being rendered, make sure before,\n/// that there aren't many other media queries also needed to complete your definition. In that case, it might be\n/// better and more performant to rather write the queries manually and get the spacing values via `map-get` or\n/// `spacing-value`.\n///\n/// @param {Map} $attributes - keys are attribute names, while values are spacing sizes\n/// @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n///\n/// @example\n/// spacing-based-attributes(\n///   (\n///     'padding-top' : 'sm',\n///     'padding-right' : 'md',\n///     'padding-bottom' : 'sm'\n///     'padding-left' : 'md'\n///     'margin-top' : 'l',\n///     'margin-bottom' : 'xl'\n///   ),\n///   2.0\n/// )\n///\n@mixin spacing-based-attributes($attributes, $factor:null){\n\t$spacing-attributes: ();\n\t@each $attribute-name, $attribute-size in $attributes {\n\t\t$size-definition: map-get($--jig--spacings-config, $attribute-size);\n\n\t\t@if $size-definition == null {\n\t\t\t@error 'spacing-based-attributes | unknown size \"#{$size-definition}\"';\n\t\t}\n\n\t\t$spacing-attributes: map-merge($spacing-attributes, ($attribute-name : $size-definition));\n\t}\n\n\t@include attributes-for-breakpoints($spacing-attributes, $factor);\n}\n\n\n\n///\n/// Define an attribute based on breakpoint-dependent spacing values.\n/// Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n/// if you'll definitely only have one attribute to be defined in multiple breakpoints.\n///\n/// @param {String} $attribute - the name of the attribute you want to set\n/// @param {String} $size - on of the named sized defined in jig's spacing config (sm, l, xxl, ...)\n/// @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n///\n@mixin spacing-based-attribute($attribute, $size, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ($attribute : $size));\n\t@include spacing-based-attributes($attributes, $factor);\n}\n","#basic-grid-example {\n\t.examples > .scss-legacy {\n\t\t@include grid-container();\n\n\t\t@include attribute-for-breakpoints(background-color, $GRID_CONTAINER_BACKGROUNDCOLOR);\n\n\n\n\t\t> div {\n\t\t\tbackground-color: gray;\n\n\t\t\t&:nth-of-type(odd){\n\t\t\t\t@include grid-item(6);\n\n\t\t\t\theight: 100px;\n\t\t\t}\n\n\t\t\t&:nth-of-type(even){\n\t\t\t\t@include grid-item(6);\n\n\t\t\t\theight: 75px;\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium up){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1) {\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 100px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2) {\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 80px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 60px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4) {\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 40px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5) {\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 20px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium down){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(large){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1) {\n\t\t\t\t\t@include grid-item();\n\n\t\t\t\t\theight: 25vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2) {\n\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\theight: 12.5vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t@include grid-item-align($vertical:bottom);\n\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4) {\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t@include grid-item-align(center, center);\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 5vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5) {\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\torder: 1;\n\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n#advanced-grid-example {\n\t.examples > .scss-legacy {\n\t\t@include grid-container();\n\n\t\t@include spacing-based-attribute(padding-top, 'xxl');\n\n\t\t@include attribute-for-breakpoints(background-color, $GRID_CONTAINER_BACKGROUNDCOLOR);\n\n\n\n\t\t> div {\n\t\t\tbackground-color: gray;\n\n\t\t\t&:nth-of-type(odd){\n\t\t\t\t@include grid-item(4);\n\n\t\t\t\theight: gutter-value(5.0);\n\t\t\t}\n\n\t\t\t&:nth-of-type(even){\n\t\t\t\t@include grid-item(4);\n\t\t\t\t@include grid-item-align(null, end);\n\n\t\t\t\theight: 75px;\n\t\t\t}\n\n\t\t\t&:first-of-type {\n\t\t\t\t@include grid-item($span:4, $row-span:2);\n\n\t\t\t\theight: auto;\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(xsmall only){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1) {\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\torder: 5;\n\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\theight: gutter-value(3.0);\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2) {\n\t\t\t\t\t@include grid-item($start:8, $end:12);\n\t\t\t\t\torder: 4;\n\n\t\t\t\t\theight: 80px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\t@include grid-item($start:6, $span:2);\n\t\t\t\t\t@include grid-item-align(full, center);\n\t\t\t\t\torder: 3;\n\n\t\t\t\t\theight: 60px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4) {\n\t\t\t\t\t@include grid-item(8, $row-start:1, $row-end:3);\n\t\t\t\t\t@include grid-item-align('right', $vertical:'full');\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5) {\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t@include grid-item-align(left, top);\n\t\t\t\t\torder: 1;\n\t\t\t\t\tz-index: 1;\n\n\t\t\t\t\twidth: 200%;\n\t\t\t\t\theight: 55px;\n\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\ttransform: rotate(5deg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(large){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1) {\n\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:0, $row-span:1);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 1;\n\n\t\t\t\t\twidth: auto;\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2) {\n\t\t\t\t\t@include grid-item($start:4, $end:8, $row-start:0, $row-span:2);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3) {\n\t\t\t\t\t@include grid-item($start:8, $span:4, $row-start:0, $row-span:3);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 3;\n\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4) {\n\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:1, $row-end:2);\n\t\t\t\t\t@include grid-item-align(right, center);\n\t\t\t\t\torder: 4;\n\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5) {\n\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t@include grid-item-align(stretch);\n\t\t\t\t\torder: 5;\n\n\t\t\t\t\twidth: auto;\n\t\t\t\t\theight: 20vh;\n\n\t\t\t\t\tbackground-color: gray;\n\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}