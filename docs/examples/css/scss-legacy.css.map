{"version":3,"file":"scss-legacy.css","sources":["main.scss","../../../source/lib/normalize/index.css","defines.scss","../../../source/scss-legacy/jig/_index.scss","../../../source/scss-legacy/jig/globals.scss","../../../source/scss-legacy/jig/util.scss","../../../source/scss-legacy/jig/breakpoints.scss","../../../source/scss-legacy/jig/grid.scss","../../../source/scss-legacy/jig/content.scss","../../../source/scss-legacy/jig/spacing.scss","examples.scss"],"sourcesContent":["@import 'normalize/index';\n@import 'defines';\n@import 'jig/_index';\n@import 'examples';\n","/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n/*# sourceMappingURL=index.css.map */\n","$JIG_CONFIG: (\n\t'breakpoints' : (\n\t\t'xsmall' : 0,\n\t\t'medium' : 768px,\n\t\t'large' : 1280px,\n\t\t'xlarge' : 1600px\n\t),\n\t'print-breakpoint' : 'large',\n\t'grid' : (\n\t\t'columns' : 12,\n\t\t'gutters' : (\n\t\t\t'horizontal' : (\n\t\t\t\t'xsmall' : 10px,\n\t\t\t\t'medium' : 20px,\n\t\t\t\t'large' : 40px\n\t\t\t),\n\t\t\t'vertical' : 20px\n\t\t)\n\t),\n\t'spacing' : (\n\t\t'xxs' : (\n\t\t\t'xsmall' : 10px\n\t\t),\n\t\t'xs' : (\n\t\t\t'xsmall' : 10px,\n\t\t\t'small' : 20px\n\t\t),\n\t\t'sm' : (\n\t\t\t'xsmall' : 20px,\n\t\t\t'large' : 30px\n\t\t),\n\t\t'md' : (\n\t\t\t'xsmall' : 30px,\n\t\t\t'xlarge' : 40px\n\t\t),\n\t\t'l' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 60px\n\t\t),\n\t\t'xl' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 50px,\n\t\t\t'large' : 80px\n\t\t),\n\t\t'xxl' : (\n\t\t\t'xsmall': 40px,\n\t\t\t'medium': 80px,\n\t\t\t'large' : 120px\n\t\t)\n\t),\n\t'content' : (\n\t\t'padding' : (\n\t\t\t'xsmall' : 15px,\n\t\t\t'small' : 35px,\n\t\t\t'medium' : 50px,\n\t\t\t'xlarge' : 60px\n\t\t),\n\t\t'min-width' : 360px - (2 * 15px),\n\t\t'max-width' : 1200px - (2 * 60px),\n\t\t'base-font-size' : 12px\n\t)\n);\n\n$GRID_CONTAINER_BACKGROUNDCOLOR: (\n\t'xsmall' : #aaa,\n\t'medium' : #ccc,\n\t'large' : #eee\n);\n\n$GRID_CONTAINER_BACKGROUNDIMAGE: (\n\t'xsmall' : url('../files/img/background-small.jpg'),\n\t'medium' : url('../files/img/background-medium.jpg'),\n\t'large' : url('../files/img/background-large.jpg')\n);\n","@import 'globals';\n@import 'util';\n@import 'breakpoints';\n@import 'grid';\n@import 'content';\n@import 'spacing';\n","$JIG_CONFIG: null !default;\n$jig---config: null !default;\n@if (type-of($jig---config) != 'map') and (type-of($JIG_CONFIG) == 'map') {\n\t$jig---config: $JIG_CONFIG;\n}\n\n@if type-of($jig---config) != 'map' {\n\t@error 'jig:globals | jig config is undefined or not a map'\n}\n\n\n\n$jig---breakpoint-config: map-get($jig---config, 'breakpoints') !default;\n$jig---breakpoint-config: (\n\t'small' : 0,\n\t'medium' : 768px,\n\t'large' : 1280px\n) !default;\n\n\n\n$jig---grid-config: map-get($jig---config, 'grid') !default;\n$jig---grid-config: (\n\t'columns' : 12,\n\t'gutters' : (\n\t\t'horizontal' : (\n\t\t\t'small' : 20px,\n\t\t\t'medium' : 30px,\n\t\t\t'large' : 40px\n\t\t),\n\t\t'vertical' : 20px\n\t)\n) !default;\n\n\n\n$jig---spacing-config: map-get($jig---config, 'spacing') !default;\n$jig---spacing-config: (\n\t'sm' : (\n\t\t'small' : 1rem,\n\t\t'medium' : 2rem,\n\t\t'large' : 3rem\n\t),\n\t'md' : (\n\t\t'small' : 2rem,\n\t\t'medium' : 3rem,\n\t\t'large' : 5rem\n\t),\n\t'l' : (\n\t\t'small' : 3rem,\n\t\t'medium' : 5rem,\n\t\t'large' : 8rem\n\t)\n) !default;\n\n\n\n$jig---content-config: map-get($jig---config, 'content') !default;\n$jig---content-config: (\n\t'padding' : (\n\t\t'small' : 20px,\n\t\t'medium' : 40px,\n\t\t'large' : 80px\n\t),\n\t'max-width' : 1600px,\n\t'base-font-size' : 16px\n) !default;\n\n\n\n$jig---base-font-size: map-get($jig---content-config, 'base-font-size') !default;\n$jig---base-font-size: 16px !default;\n\n\n\n$jig---print-breakpoint: map-get($jig---config, 'print-breakpoint') !default;\n$jig---print-breakpoint: 'large' !default;\n","/**\n * @namespace Util\n */\n\n\n\n/**\n * @namespace Util:map-get-deep\n */\n\n/**\n * Retrieve a value deeply nested in a map, defined by a path of keys.\n *\n * @memberof Util:map-get-deep\n * @function\n * @name map-get-deep\n * @alias map-get-deep\n *\n * @param {Map} $map - the map to search in\n * @param {String|List<String>} $keys - the keys to traverse down in the map\n * @returns {*|null} the value at the defined key path or null if not defined\n *\n * @example\n * map-get-deep($foo-map, 'level1', 'level2')\n *   => value of $foo-map.level1.level2\n */\n@function map-get-deep($map, $keys...){\n\t@each $key in $keys {\n\t\t@if map-has-key($map, $key) {\n\t\t\t$map: map-get($map, $key);\n\t\t} @else {\n\t\t\t@return null;\n\t\t}\n\t}\n\n\t@return $map;\n}\n\n\n\n/**\n * @namespace Util:map-next\n */\n\n/**\n * Retrieves the value of the adjacent, next key in a map, if one exists.\n * The idea is, to retrieve the next key, based on a current one, to go one step further,\n * which is helpful for things like escalating to the next breakpoint for example.\n *\n * @memberof Util:map-next\n * @function\n * @name map-next\n * @alias map-next\n *\n * @param {Map} $map - the map to use\n * @param {String} $key - the current key, from which we want to go to the next\n * @returns {*|null} the value of the next key or null if there is none\n *\n * @example\n * map-next($foo-map, 'small')\n *   => value of $foo-map.medium\n */\n@function map-next($map, $key){\n\t$keys: map-keys($map);\n\n\t$next-index: 0;\n\t@if map-has-key($map, $key) {\n\t\t$next-index: index($keys, $key) + 1;\n\t}\n\n\t@if ($next-index == 0) or ($next-index > length($map)) {\n\t\t@return null;\n\t} @else {\n\t\t@return map-get($map, nth($keys, $next-index));\n\t}\n}\n\n\n\n/**\n * @namespace Util:strip-unit\n */\n\n/**\n * Removes the unit from a value, turning it into a unit-less value.\n *\n * @memberof Util:strip-unit\n * @function\n * @name strip-unit\n * @alias strip-unit\n *\n * @param {Number} $number - the number to strip the unit from\n * @returns {Number} the unit-less number\n *\n * @example\n * strip-unit(16px)\n *   => 16\n */\n@function strip-unit($number){\n\t@return $number / ($number * 0 + 1);\n}\n\n\n\n/**\n * @namespace Util:to-rem\n */\n\n/**\n * Convert one or more px values to (a) rem value(s), based on a base font size in px, percent or rem.\n * If the base is in % or rem, the base will be converted to px based on the global base font size.\n *\n * @memberof Util:to-rem\n * @function\n * @name to-rem\n * @alias to-rem\n *\n * @param {Number|List<Number>} $values - the value(s) to convert, usually px values, if a value is em, it will be treated as rem\n * @param {?Number} [$base=$jig---base-font-size-px] - the base size to convert against\n * @returns {Number|List<Number>} the converted value(s)\n *\n * @example\n * to-rem(32px)\n *   => 2rem\n * to-rem((10px, 20px, 40px), 20px)\n *   => [0.5rem, 1rem, 2rem]\n */\n@function to-rem($values, $base:$jig---base-font-size){\n\t@if unit($base) == '%' {\n\t\t$base: (strip-unit($base) / 100) * $jig---base-font-size;\n\t}\n\n\t@if unit($base) == 'rem' {\n\t\t$base: strip-unit($base) * $jig---base-font-size;\n\t}\n\n\t@if type-of($values) != 'list' {\n\t\t$values: [$values];\n\t}\n\n\t$rem-values: [];\n\t@each $value in $values {\n\t\t$rem-value: 0;\n\n\t\t@if unit($value) == 'em' {\n\t\t\t$rem-value: strip-unit($value);\n\t\t} @else {\n\t\t\t$rem-value: strip-unit($value) / strip-unit($base);\n\t\t}\n\n\t\t@if $rem-value != 0 {\n\t\t\t$rem-value: $rem-value * 1rem;\n\t\t}\n\n\t\t$rem-values: append($rem-values, $rem-value);\n\t}\n\n\t@if length($rem-values) == 1 {\n\t\t@return nth($rem-values, 1);\n\t} @else {\n\t\t@return $rem-values;\n\t}\n}\n\n\n\n/**\n * @namespace Util:to-em\n */\n\n/**\n * Convert one or more px values to (a) em value(s), based on a base font size in px, percent or rem.\n * If the base is in % or rem, the base will be converted to px based on the global base font size.\n *\n * @memberof Util:to-em\n * @function\n * @name to-em\n * @alias to-em\n *\n * @param {Number|List<Number>} $values - the value(s) to convert, usually px values, if a value is em, it will not be changed\n * @param {Number} $base - the base size to convert against\n * @returns {Number|List<Number>} the converted value(s)\n *\n * @example\n * to-em(32px, 16px)\n *   => 2em\n * to-em((10px, 20px, 40px), 20px)\n *   => [0.5em, 1em, 2em]\n */\n@function to-em($values, $base){\n\t$rem-values: to-rem($values, $base);\n\t@if type-of($rem-values) != 'list' {\n\t\t$rem-values: [$rem-values];\n\t}\n\n\t$em-values: [];\n\t@each $rem-value in $rem-values {\n\t\t$em-value: 0;\n\n\t\t@if $rem-value != 0 {\n\t\t\t$em-value: strip-unit($rem-value) * 1em;\n\t\t}\n\n\t\t$em-values: append($em-values, $em-value);\n\t}\n\n\t@if length($em-values) == 1 {\n\t\t@return nth($em-values, 1);\n\t} @else {\n\t\t@return $em-values;\n\t}\n}\n\n\n\n/**\n * @namespace Util:str-join\n */\n\n/**\n * Join/concatenate two or more strings with an optional glue string.\n *\n * @memberof Util:str-join\n * @function\n * @name str-join\n * @alias str-join\n *\n * @param {String|List<String>} strings - the strings to join\n * @param {String} glue - the string to put between joined strings\n * @returns {String} the joined string\n *\n * @example\n * str-join(['fo', 'ar'], 'ob')\n *   => 'foobar'\n */\n@function str-join($strings, $glue:''){\n\t$strings: join([], $strings);\n\n\t$res: '';\n\t@each $string in $strings {\n\t\t@if $string {\n\t\t\t$res: $res+$string+$glue;\n\t\t}\n\t}\n\n\t@if ($res != '') and ($glue != '') {\n\t\t@return str-slice($res, 1, str-length($glue) * -1);\n\t} @else {\n\t\t@return $res;\n\t}\n}\n","/**\n * @namespace Breakpoints\n */\n\n\n\n$jig---auto-breakpoint: nth(map-keys($jig---breakpoint-config), 1);\n\n\n\n/**\n * @namespace Breakpoints:get-auto-breakpoint\n */\n\n/**\n * Returns the current auto breakpoint value.\n *\n * @memberof Breakpoints:get-auto-breakpoint\n * @function\n * @name get-auto-breakpoint\n * @alias get-auto-breakpoint\n *\n * @returns {String} the name of the current named auto breakpoint\n *\n * @see set-auto-breakpoint\n * @see reset-auto-breakpoint\n *\n * @example\n * get-auto-breakpoint()\n *   => 'medium'\n */\n@function get-auto-breakpoint(){\n\t@return $jig---auto-breakpoint;\n}\n\n\n\n/**\n * @namespace Breakpoints:set-auto-breakpoint\n */\n\n/**\n * Sets the auto breakpoint to a named breakpoint value.\n * Hint: in Sass we do _not_ have to do this manually, if we want to use auto breakpoint values,\n * since blocks are always evaluated _after_ the block mixin around the block, which results\n * in the block knowing the breakpoint value automatically from the mixin around it.\n *\n * @memberof Breakpoints:set-auto-breakpoint\n * @function\n * @name set-auto-breakpoint\n * @alias set-auto-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @throws error if breakpoint is unknown\n *\n * @see reset-auto-breakpoint\n\n * @example\n * \\@include set-auto-breakpoint(medium);\n * \\@include breakpoint(medium){\n *   ...\n * }\n */\n@mixin set-auto-breakpoint($breakpoint){\n\t@if map-has-key($jig---breakpoint-config, $breakpoint) {\n\t\t$jig---auto-breakpoint: $breakpoint !global;\n\t} @else {\n\t\t@error 'jig:set-current-breakpoint | unknown named breakpoint \"#{$breakpoint}\"';\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:reset-auto-breakpoint\n */\n\n/**\n * Resets the auto breakpoint to the first/smallest named breakpoint defined in the jig config.\n * Hint: this is automatically called at the end of the breakpoint mixin, so usually you should be fine\n * never calling this manually\n *\n * @memberof Breakpoints:reset-auto-breakpoint\n * @function\n * @name reset-auto-breakpoint\n * @alias reset-auto-breakpoint\n *\n * @see set-auto-breakpoint\n\n * @example\n * \\@include reset-auto-breakpoint();\n */\n@mixin reset-auto-breakpoint(){\n\t$jig---auto-breakpoint: nth(map-keys($jig---breakpoint-config), 1) !global;\n}\n\n\n\n/**\n * @namespace Breakpoints:is-named-breakpoint\n */\n\n/**\n * Returns if the given breakpoint is a registered named breakpoint to be found in the jig config.\n *\n * @memberof Breakpoints:is-named-breakpoint\n * @function\n * @name is-named-breakpoint\n * @alias is-named-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @returns {Boolean} true if breakpoint is a registered named breakpoint name\n *\n * @example\n * is-named-breakpoint(medium)\n *   => true\n */\n@function is-named-breakpoint($breakpoint){\n\t@return map-has-key($jig---breakpoint-config, $breakpoint);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-range\n */\n\n/**\n * Returns a string to be used in a media query, which defines the range/bounds of a breakpoint with\n * min and/or max value.\n *\n * @memberof Breakpoints:build-breakpoint-range\n * @function\n * @name build-breakpoint-range\n * @alias build-breakpoint-range\n *\n * @param {?Number} [$min=null] - the min width of the breakpoint\n * @param {?Number} [$max=null] - the max width of the breakpoint\n * @returns {String} the media query string for the breakpoint range\n *\n * @example\n * build-breakpoint-range(0, 767px)\n *   => '(min-width: 0) and (max-width: 767px)'\n * build-breakpoint-range(null, 100rem)\n *   => '(max-width: 100rem)'\n */\n@function build-breakpoint-range($min:null, $max:null){\n\t@return str-join(\n\t\t[\n\t\t\tif($min != null, '(min-width: #{$min})', null),\n\t\t\tif($max != null, '(max-width: #{$max})', null)\n\t\t],\n\t\t' and '\n\t);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-query\n */\n\n/**\n * Constructs a query to be used in a media query, based on a breakpoint definition.\n * Also automatically converts values to rem.\n *\n * Directions in composite definitions may be \"up\", \"down\" or \"only\".\n *\n * You may also define the special breakpoints \"landscape\" or \"portrait\" to cover device orientations.\n *\n * @memberof Breakpoints:build-breakpoint-query\n * @function\n * @name build-breakpoint-query\n * @alias build-breakpoint-query\n *\n * @param {?Number|Literal|List<String>} [$breakpoint-definition=0] - either a simple number or a composite definition of width and direction, where the width may either be a number or a name defined in the named breakpoints\n * @returns {String} the media query string for the breakpoint definition\n * @throws error if named breakpoint is unknown\n * @throws error if an unnamed breakpoint has an \"only\" direction\n *\n * @example\n * build-breakpoint-query(200rem)\n *   => '(min-width: 200rem)'\n * build-breakpoint-query(small down)\n *   => '(max-width: 199rem)'\n * build-breakpoint-query(('large' 'only'))\n *   => '(min-width: 200rem) and (max-width: 499rem)'\n * build-breakpoint-query(1024px only)\n *   => '(min-width: 64rem) and (max-width: 64rem)'\n * build-breakpoint-query(landscape)\n *   => '(orientation: landscape)'\n */\n@function build-breakpoint-query($breakpoint-definition:0){\n\t$breakpoint: if($breakpoint-definition and (length($breakpoint-definition) > 0), nth($breakpoint-definition, 1), 0);\n\t$direction: if($breakpoint-definition and (length($breakpoint-definition) > 1), nth($breakpoint-definition, 2), 'up');\n\t$breakpoint-name: null;\n\t$next-breakpoint: null;\n\t$min: null;\n\t$max: null;\n\t$query-em-conversion-base: 16px; // this is always 16px, no matter what is defined on <html>\n\n\t@if $breakpoint == 'overwrite' {\n\t\t@return '(min-width: 0)';\n\t} @else if ($breakpoint == 'landscape') or ($breakpoint == 'portrait') {\n\t\t@return '(orientation: #{$breakpoint})';\n\t} @else if type-of($breakpoint) == 'string' {\n\t\t@if is-named-breakpoint($breakpoint) {\n\t\t\t$breakpoint-name: $breakpoint;\n\t\t\t$breakpoint: map-get($jig---breakpoint-config, $breakpoint-name);\n\t\t\t$next-breakpoint: map-next($jig---breakpoint-config, $breakpoint-name);\n\t\t} @else {\n\t\t\t@error 'jig:build-breakpoint-query | \"#{$breakpoint-definition}\" is not a defined breakpoint';\n\t\t}\n\t}\n\n\t@if ($breakpoint-name == null) and ($direction == 'only') {\n\t\t@error 'jig:build-breakpoint-query | only named media queries can have an \"only\" range';\n\t}\n\n\t// we are building media queries with em instead of rem and px\n\t// why? => https://zellwk.com/blog/media-query-units/\n\n\t@if ($direction == 'only') or ($direction == 'up') {\n\t\t$min: to-em($breakpoint, $query-em-conversion-base);\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'down') {\n\t\t@if $breakpoint-name == null {\n\t\t\t$max: to-em($breakpoint, $query-em-conversion-base);\n\t\t} @else if $next-breakpoint != null {\n\t\t\t$max: to-em($next-breakpoint, $query-em-conversion-base) - to-em(1px, $query-em-conversion-base);\n\t\t}\n\t}\n\n\t@if ($min == 0) and ($max == null){\n\t\t$min: null;\n\t}\n\n\t@return build-breakpoint-range($min, $max);\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint\n */\n\n/**\n * Renders media queries based one one or more breakpoint definitions.\n *\n * @memberof Breakpoints:breakpoint\n * @function\n * @name breakpoint\n * @alias breakpoint\n *\n * @param {Number|Literal|List<String>|List<Literal>|List<List<String>>} $breakpoint-definitions - a list of breakpoint definitions according to build-breakpoint-query\n *\n * @example\n * \\@include breakpoint(small){\n *   ...\n * }\n * \\@include breakpoint(small down, large up){\n *   ...\n * }\n */\n@mixin breakpoint($breakpoint-definitions...){\n\t@each $breakpoint-definition in $breakpoint-definitions {\n\t\t$query: build-breakpoint-query($breakpoint-definition);\n\t\t$breakpoint: if(length($breakpoint-definition) > 0, nth($breakpoint-definition, 1), 0);\n\t\t$direction: if(length($breakpoint-definition) > 1, nth($breakpoint-definition, 2), 'up');\n\t\t$breakpoint-index: index(map-keys($jig---breakpoint-config), nth($breakpoint-definition, 1));\n\t\t$print-breakpoint-index: index(map-keys($jig---breakpoint-config), $jig---print-breakpoint);\n\n\t\t// set current breakpoint var to mixin breakpoint value to allow for auto-evaluation inside\n\t\t@if is-named-breakpoint($breakpoint){\n\t\t\t@include set-auto-breakpoint($breakpoint);\n\t\t}\n\n\t\t@if $query == '' {\n\t\t\t@content;\n\t\t} @else {\n\t\t\t@if(\n\t\t\t\t($breakpoint-index != null)\n\t\t\t\tand (\n\t\t\t\t\t($breakpoint-index <= $print-breakpoint-index)\n\t\t\t\t\tor ($direction == 'down')\n\t\t\t\t)\n\t\t\t){\n\t\t\t\t@media print, screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@media screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// restore initial value after mixin has been rendered\n\t\t@include reset-auto-breakpoint();\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint-value\n */\n\n/**\n * Search for a value, defined for a breakpoint, in a given map of values.\n * The function escalates in a mobile-first manner. So we take the value for the smallest breakpoint\n * and step up the breakpoints one by one until we reach the defined breakpoint. So, if we want the\n * according value for \"large\", but we only have a value for \"medium\", we'll get the \"medium\" value, which,\n * in mobile-first manner, escalates upwards and is the \"large\" value if nothing else is defined.\n *\n * @memberof Breakpoints:breakpoint-value\n * @function\n * @name breakpoint-value\n * @alias breakpoint-value\n *\n * @param {*|Map} $value - a map of breakpoint-keyed map of values, or a simple value\n * @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named breakpoints\n * @returns {*|null} the breakpoint value or null if nothing was found\n * @throws error if named breakpoint is unknown\n *\n * @example\n * breakpoint-value(\n *   (\n *     'small' : 10px,\n *     'medium' : 20px\n *   ),\n *   large\n * )\n *   => 20px\n */\n@function breakpoint-value($value, $breakpoint:'auto'){\n\t@if ($breakpoint != 'auto') and not map-has-key($jig---breakpoint-config, $breakpoint) {\n\t\t@error 'jig:breakpoint-value | given breakpoint \"#{$breakpoint}\" not defined';\n\t}\n\n\t@if type-of($value) == 'map' {\n\t\t$res: null;\n\n\t\t@if $breakpoint == 'auto' {\n\t\t\t$breakpoint: get-auto-breakpoint();\n\t\t}\n\n\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t$breakpoint-value: map-get($value, $breakpoint-name);\n\n\t\t\t@if $breakpoint-value != null {\n\t\t\t\t$res: $breakpoint-value;\n\t\t\t}\n\n\t\t\t@if $breakpoint-name == $breakpoint {\n\t\t\t\t@return $res;\n\t\t\t}\n\t\t}\n\n\t\t@return null;\n\t} @else {\n\t\t@return $value;\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attributes-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attributes for defined breakpoints.\n *\n * Definitions will be rendered together if possible, minimizing the amount of media queries.\n * However, each call of this mixin will, most likely, render multiple media queries, so keep a close eye\n * on your media query structure to avoid unnecessarily doubled definitions and keep media queries to a minimum.\n * If in doubt, it might be a better idea to write the queries manually, perhaps rather using `map-get` or\n * `breakpoint-value` to automatically pull values from breakpoint value maps.\n *\n * @memberof Breakpoints:attributes-for-breakpoints\n * @function\n * @name attributes-for-breakpoints\n * @alias attributes-for-breakpoints\n *\n * @see attribute-for-breakpoints\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @example\n * \\@include attributes-for-breakpoints(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : (\n *       'small' : 1,\n *       'large' : 1.25\n *     ),\n *     'margin-top' : (\n *       'small' : 10px,\n *       'medium' : 20px\n *     )\n *   ),\n *   2.0\n * );\n */\n@mixin attributes-for-breakpoints($attributes, $factor:null){\n\t$attributes-for-breakpoints: ();\n\t@each $attribute-name, $attribute-value in $attributes {\n\t\t@if type-of($attribute-value) != 'map' {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t} @else {\n\t\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t\t$breakpoint-value: map-get($attribute-value, $breakpoint-name);\n\t\t\t\t@if $breakpoint-value != null {\n\t\t\t\t\t$breakpoint-attributes: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t\t\t\t@if $breakpoint-attributes == null {\n\t\t\t\t\t\t$breakpoint-attributes: ();\n\t\t\t\t\t}\n\n\t\t\t\t\t$breakpoint-attributes: map-merge(\n\t\t\t\t\t\t$breakpoint-attributes,\n\t\t\t\t\t\t($attribute-name : $breakpoint-value)\n\t\t\t\t\t);\n\n\t\t\t\t\t$attributes-for-breakpoints: map-merge(\n\t\t\t\t\t\t$attributes-for-breakpoints,\n\t\t\t\t\t\t($breakpoint-name : $breakpoint-attributes)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t$breakpoint-attributes: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t@if ($breakpoint-attributes != null) and (length(map-keys($breakpoint-attributes)) > 0) {\n\t\t\t@include breakpoint($breakpoint-name){\n\t\t\t\t@each $attribute-name, $attribute-value in $breakpoint-attributes {\n\t\t\t\t\t@if $factor == null {\n\t\t\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attribute-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attribute for defined breakpoints.\n *\n * This is the single attribute version of `attributes-for-breakpoints`.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @memberof Breakpoints:attribute-for-breakpoints\n * @function\n * @name attribute-for-breakpoints\n * @alias attribute-for-breakpoints\n *\n * @see attributes-for-breakpoints\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include attribute-for-breakpoints(\n *   'line-height',\n *   (\n *     'small' : 1,\n *     'large' : 1.25\n *   ),\n *   1.0\n * );\n */\n@mixin attribute-for-breakpoints($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $value));\n\t@include attributes-for-breakpoints($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attributes\n */\n\n/**\n * Use this, if you need to overwrite attribute values previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attributes\n * @function\n * @name overwrite-breakpoint-for-attributes\n * @alias overwrite-breakpoint-for-attributes\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @see overwrite-breakpoint-for-attribute\n *\n * @example\n * \\@include overwrite-breakpoint-for-attributes(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : 1.25\n *     'margin-top' : 20px\n *   ),\n *   2.0\n * );\n */\n@mixin overwrite-breakpoint-for-attributes($attributes, $factor:null){\n\t@include breakpoint('overwrite'){\n\t\t@each $attribute-name, $attribute-value in $attributes {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attribute\n */\n\n/**\n * Use this, if you need to overwrite an attribut value previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attribute\n * @function\n * @name overwrite-breakpoint-for-attribute\n * @alias overwrite-breakpoint-for-attribute\n *\n * @see overwrite-breakpoint-for-attributes\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include overwrite-breakpoint-for-attribute(font-size, 12px, 2.0);\n */\n@mixin overwrite-breakpoint-for-attribute($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $value));\n\t@include overwrite-breakpoint-for-attributes($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint\n */\n\n/**\n * Use this, if you need to overwrite something previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to redefine something statically in an override situation, which has\n * been defined responsively before.\n *\n * @memberof Breakpoints:overwrite-breakpoint\n * @function\n * @name overwrite-breakpoint\n * @alias overwrite-breakpoint\n *\n * @example\n * \\@include overwrite-breakpoint(){\n *   font-size: 12xp;\n *   margin-top: 20px;\n * }\n */\n@mixin overwrite-breakpoint(){\n\t@include breakpoint('overwrite'){\n\t\t@content;\n\t}\n}\n","/**\n * @namespace Grid\n */\n\n\n\n/**\n * @namespace Grid:grid-container\n */\n\n/**\n * Renders the basic properties of a grid container, which is the bracket element for elements, which are\n * to be placed in a grid, thereby making the container, more or less, \"the grid itself\".\n *\n * The basic characteristic of this container is the pre-definition of usable grid columns, according to our config.\n *\n * @memberof Grid:grid-container\n * @function\n * @name grid-container\n * @alias grid-container\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-container();\n */\n@mixin grid-container(){\n\tdisplay: grid;\n\tgrid-auto-flow: row;\n\tgrid-template-columns: repeat(map-get($jig---grid-config, 'columns'), 1fr);\n\t@include attributes-for-breakpoints((\n\t\t'grid-column-gap' : map-get-deep($jig---grid-config, 'gutters', 'horizontal'),\n\t\t'grid-row-gap' : map-get-deep($jig---grid-config, 'gutters', 'vertical')\n\t));\n}\n\n\n\n/**\n * @namespace Grid:grid-item\n */\n\n/**\n * Renders the basic properties of a grid item, which is an item inside a grid, being placed according to\n * pre-defined columns.\n *\n * The main purpose of this mixin is, to define the space, the item takes inside the grid. To do this, there are\n * several means of definition. Either just giving it a column-based width, aligning it at the end of other,\n * already existing items, or defining a specific area it should cover, by explicitly defining a start and end column\n * or a combination of both.\n *\n * Additionally, the item may also be defined to take up more than one row, adding the native grid capabilities to\n * our concepts.\n *\n * @memberof Grid:grid-item\n * @function\n * @name grid-item\n * @alias grid-item\n *\n * @param {?Number} [$span=null] - the width of the item in columns\n * @param {?Number} [$start=null] - the horizontal start offset of the item in columns, may be combined with end or span\n * @param {?Number} [$end=null] - the horizontal end offset of the item in columns, may be combined with start or span\n * @param {?Number} [$row-span=null] - the height of the item in rows\n * @param {?Number} [$row-start=null] - the vertical start offset of the item in rows, may be combined with row-end or row-span\n * @param {?Number} [$row-end=null] - the vertical end offset of the item in rows, may be combined with row-start or row-span\n *\n * @see grid-container\n * @see grid-item-align\n *\n * @example\n * \\@include grid-item(12);\n * \\@include grid-item(6, 6);\n * \\@include grid-item(null, 2, 2);\n * \\@include grid-item(6, null, null, 2);\n * \\@include grid-item(6, null, null, null, 0, 5);\n */\n@mixin grid-item(\n\t$span:null,\n\t$start:null,\n\t$end:null,\n\t$row-span:null,\n\t$row-start:null,\n\t$row-end:null\n){\n\t@if ($span == null) and ($start == null) {\n\t\tgrid-column-end: span map-get($jig---grid-config, 'columns');\n\t} @else {\n\t\t@if $span != null {\n\t\t\tgrid-column-end: span $span;\n\t\t}\n\n\t\t@if $start != null {\n\t\t\tgrid-column-start: $start + 1;\n\t\t}\n\n\t\t@if ($end != null) and ($span == null) {\n\t\t\tgrid-column-end: $end + 1;\n\t\t}\n\t}\n\n\t@if ($row-span != null) or ($row-start != null) {\n\t\t@if $row-span != null {\n\t\t\tgrid-row-end: span $row-span;\n\t\t}\n\n\t\t@if $row-start != null {\n\t\t\tgrid-row-start: $row-start + 1;\n\t\t}\n\n\t\t@if ($row-end != null) and ($row-span == null) {\n\t\t\tgrid-row-end: $row-end + 1;\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Grid:grid-item-align\n */\n\n/**\n * Renders properties of a grid item, to define the item's alignment inside the area defined for the item using\n * the grid-item mixin. The usage of this only make sense for grid items.\n *\n * @memberof Grid:grid-item-align\n * @function\n * @name grid-item-align\n * @alias grid-item-align\n *\n * @param {String} [$horizontal=null] - \"left\"/\"start\", \"right\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n * @param {String} [$vertical=null] - \"top\"/\"start\", \"bottom\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-item-align('left');\n * \\@include grid-item-align(center, center);\n * \\@include grid-item-align(null, 'full');\n */\n@mixin grid-item-align($horizontal:null, $vertical:null){\n\t@if $horizontal == 'left' {\n\t\t$horizontal: 'start';\n\t} @else if $horizontal == 'right' {\n\t\t$horizontal: 'end';\n\t} @else if $horizontal == 'middle' {\n\t\t$horizontal: 'center';\n\t} @else if $horizontal == 'full' {\n\t\t$horizontal: 'stretch';\n\t}\n\n\t@if $vertical == 'top' {\n\t\t$vertical: 'start';\n\t} @else if $vertical == 'bottom' {\n\t\t$vertical: 'end';\n\t} @else if $vertical == 'middle' {\n\t\t$vertical: 'center';\n\t} @else if $vertical == 'full' {\n\t\t$vertical: 'stretch';\n\t}\n\n\t@if $horizontal != null {\n\t\tjustify-self: unquote($horizontal);\n\t}\n\n\t@if $vertical != null {\n\t\talign-self: unquote($vertical);\n\t}\n}\n\n\n\n/**\n * @namespace Grid:gutter-value\n */\n\n/**\n * Returns the value of the defined distance between two columns/rows for a breakpoint.\n *\n * The main usage for this is, to define a property value based on the current gutter.\n * This is why the parameter order may seem flipped, but usually, you'd use this inside a breakpoint\n * using auto-breakpoint detection, primarily rather working with the value itself. For other cases:\n * Remember, that that you can simply use named parameters.\n *\n * @memberof Grid:gutter-value\n * @function\n * @name gutter-value\n * @alias gutter-value\n *\n * @param {String} [$direction='horizontal'] - either \"horizontal\" or \"vertical\", determines the gutter direction in the grid\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @returns {Number} the determined gutter value with applied factor and/or addition\n * @throws error if no gutter value could be determined, based on given breakpoint and/or direction\n *\n * @example\n * \\@include breakpoint(medium){\n *   padding-left: gutter-value() * 0.5;\n * }\n * margin-top: gutter-value($direction:'vertical', $breakpoint:'small');\n */\n@function gutter-value($direction:'horizontal', $breakpoint:'auto'){\n\t$gutter: map-get-deep($jig---grid-config, 'gutters', $direction);\n\t$res: null;\n\n\t@if $gutter != null {\n\t\t@if type-of($gutter) == 'map' {\n\t\t\t$res: breakpoint-value($gutter, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $gutter;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'jig:gutter-value | could not resolve gutter, check direction and/or breakpoint';\n\t}\n\n\t@return $res;\n}\n","/**\n * @namespace Content\n */\n\n\n\n/**\n * @namespace Content:content-holder\n */\n\n/**\n * Adds properties to the current element, which make it a \"content holder\", meaning, that it\n * adheres to the defined min/max content widths and keeps the content away from the browser edges by\n * defining margins according to the defined responsive content paddings.\n *\n * Min and max widths are only rendered if they are defined in the jig config, as are content paddings.\n *\n * A content holder can be used as the base container definition for non-breakout elements on a page,\n * which is not supposed to grow indefinitely horizontally.\n *\n * A content holder can be a grid container at the same time, these things do not exclude themselves and\n * are even a very common use case.\n *\n * @memberof Content:content-holder\n * @function\n * @name content-holder\n * @alias content-holder\n *\n * @param {Boolean} [$padded=true] - if true, config-defined responsive content padding gets applied to the element\n * @param {Boolean} [$centered=true] - if true, element gets auto-centered using auto margins\n *\n * @example\n * \\@include content-holder();\n */\n@mixin content-holder($padded:true, $centered:false){\n\t$breakpoint-names: map-keys($jig---breakpoint-config);\n\t$smallest-breakpoint: nth($breakpoint-names, 1);\n\t$largest-breakpoint: nth($breakpoint-names, -1);\n\n\t$min-width: content-width-value('min');\n\t$max-width: content-width-value('max');\n\n\t@if $min-width != null {\n\t\tmin-width: $min-width + (2 * content-padding-value($smallest-breakpoint));\n\t}\n\t@if $max-width != null {\n\t\tmax-width: $max-width + (2 * content-padding-value($largest-breakpoint));\n\t}\n\n\t@if $centered {\n\t\tmargin-right: auto;\n\t\tmargin-left: auto;\n\t}\n\n\t@if $padded {\n\t\t$content-padding: map-get($jig---content-config, 'padding');\n\n\t\t@if $content-padding != null {\n\t\t\t@include attributes-for-breakpoints((\n\t\t\t\t'padding-left' : $content-padding,\n\t\t\t\t'padding-right' : $content-padding,\n\t\t\t));\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Content:content-padding-value\n */\n\n/**\n * Returns the defined content padding for a/the current breakpoint.\n *\n * @memberof Content:content-padding-value\n * @function\n * @name content-padding-value\n * @alias content-padding-value\n *\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @returns {Number} the determined content padding value\n * @throws error if no content padding value could be determined, based on given breakpoint\n *\n * @example\n * \\@include breakpoint(medium){\n *   padding-left: content-padding-value();\n * }\n * margin-right: content-padding-value($breakpoint:'small');\n */\n@function content-padding-value($breakpoint:'auto'){\n\t$padding: map-get($jig---content-config, 'padding');\n\t$res: null;\n\n\t@if $padding != null {\n\t\t@if type-of($padding) == 'map' {\n\t\t\t$res: breakpoint-value($padding, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $padding;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'jig:content-padding-value | could not resolve content padding, check breakpoint';\n\t}\n\n\t@return $res;\n}\n\n\n\n/**\n * @namespace Content:content-width-value\n */\n\n/**\n * Returns the defined min/max content width.\n *\n * @memberof Content:content-width-value\n * @function\n * @name content-width-value\n * @alias content-width-value\n *\n * @param {String} [$min-max='max'] - either \"min\" or \"max\", defines if min or max content-width is returned\n * @param {?Number} [$default=null] - the default value to return if the width definition cannot be found\n * @returns {Number|null} the determined content width value, may be null if width is not defined (depending on default value)\n *\n * @example\n * max-width: content-width-value();\n * min-width: content-width-value('min', 0);\n */\n@function content-width-value($min-max:'max', $default:null){\n\t$width: map-get($jig---content-config, 'max-width');\n\t@if $min-max == 'min' {\n\t\t$width: map-get($jig---content-config, 'min-width');\n\t}\n\n\t@if $width == null {\n\t\t$width: $default;\n\t}\n\n\t@return $width;\n}\n\n\n\n/**\n * @namespace Content:base-font-size-value\n */\n\n/**\n * Returns the base font size, which is most likely applied to the html/body elements and acts as the base\n * for rem calculations.\n *\n * @memberof Content:base-font-size-value\n * @function\n * @name base-font-size-value\n * @alias base-font-size-value\n *\n * @returns {Number} the currently set jig base font size value\n *\n * @example\n * font-size: base-font-size-value();\n */\n@function base-font-size-value(){\n\t@return $jig---base-font-size;\n}\n","/**\n * @namespace Spacing\n */\n\n\n\n/**\n * @namespace Spacing:spacing-value\n */\n\n/**\n * Return a spacing value defined in the jig config, based on a breakpoint.\n *\n * @memberof Spacing:spacing-value\n * @function\n * @name spacing-value\n * @alias spacing-value\n *\n * @param {String} $size - on of the named sized defined in jig's spacing config (e.g. sm, l, xxl, ...)\n * @param {Literal|String} [$breakpoint='auto'] - either \"auto\" (to use the current breakpoint) or one of the defined named breakpoints\n * @returns {Number|null} the spacing value or null if nothing was found\n * @throws error if size is unknown\n *\n * @example\n * spacing-value(sm)\n *   => 12px\n * spacing-value(md, large)\n *   => 5rem\n */\n@function spacing-value($size, $breakpoint:'auto'){\n\t$spacing: map-get($jig---spacing-config, $size);\n\n\t@if $spacing == null {\n\t\t@error 'jig:spacing-value | unknown size \"#{$size}\"';\n\t}\n\n\t@if type-of($spacing) == 'map' {\n\t\t@return breakpoint-value($spacing, $breakpoint);\n\t} @else {\n\t\t@return $spacing;\n\t}\n}\n\n\n\n/**\n * @namespace Spacing:spacing-based-attributes\n */\n\n/**\n * Define (an) attribute(s) based on breakpoint-dependent spacing values.\n * This will render the given attributes with the corresponding spacing values for each defined breakpoint\n * in compiled media queries. Since this will result in many media queries being rendered, make sure before,\n * that there aren't many other media queries also needed to complete your definition. In that case, it might be\n * better and more performant to rather write the queries manually and get the spacing values via `[]` or\n * `spacing-value`.\n *\n * @memberof Spacing:spacing-based-attributes\n * @function\n * @name spacing-based-attributes\n * @alias spacing-based-attributes\n *\n * @param {Map} $attributes - keys are attribute names, while values are spacing sizes\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n * @throws error if size is unknown\n *\n * @see spacing-based-attribute\n *\n * @example\n * \\@include spacing-based-attributes(\n *   (\n *     'padding-top' : 'sm',\n *     'padding-right' : 'md',\n *     'padding-bottom' : 'sm'\n *     'padding-left' : 'md'\n *     'margin-top' : 'l',\n *     'margin-bottom' : 'xl'\n *   ),\n *   2.0\n * );\n */\n@mixin spacing-based-attributes($attributes, $factor:null){\n\t$spacing-attributes: ();\n\t@each $attribute-name, $attribute-size in $attributes {\n\t\t$size-definition: map-get($jig---spacing-config, $attribute-size);\n\n\t\t@if $size-definition == null {\n\t\t\t@error 'jig:spacing-based-attributes | unknown size \"#{$size-definition}\"';\n\t\t}\n\n\t\t$spacing-attributes: map-merge($spacing-attributes, ($attribute-name : $size-definition));\n\t}\n\n\t@include attributes-for-breakpoints($spacing-attributes, $factor);\n}\n\n\n\n/**\n * @namespace Spacing:spacing-based-attribute\n */\n\n/**\n * Define an attribute based on breakpoint-dependent spacing values.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @memberof Spacing:spacing-based-attribute\n * @function\n * @name spacing-based-attribute\n * @alias spacing-based-attribute\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {String} $size - on of the named sized defined in jig's spacing config (sm, l, xxl, ...)\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n * @throws error if size is unknown\n *\n * @see spacing-based-attributes\n *\n * @example\n * \\@include spacing-based-attribute(margin-top, 'xl', 1.0);\n */\n@mixin spacing-based-attribute($attribute, $size, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $size));\n\t@include spacing-based-attributes($attributes, $factor);\n}\n","%example-grid {\n\t@include grid-container();\n\n\tposition: relative;\n\n\tpadding: gutter-value();\n\tborder: 3px solid red;\n\n\t&:before {\n\t\tcontent: '';\n\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\n\t\tbackground-size: cover;\n\t\tbackground-position: center center;\n\t\t@include attributes-for-breakpoints((\n\t\t\t'background-color' : $GRID_CONTAINER_BACKGROUNDCOLOR,\n\t\t\t'background-image' : $GRID_CONTAINER_BACKGROUNDIMAGE\n\t\t));\n\n\t\tfilter: saturate(150%) brightness(38%);\n\t}\n\n\t@include breakpoint(medium){\n\t\tpadding: gutter-value();\n\t}\n\n\t@include breakpoint(large){\n\t\tpadding: gutter-value($breakpoint:large);\n\t}\n\n\n\n\t> div,\n\t> div > div {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\n\t\tposition: relative;\n\n\t\tborder: 3px solid dodgerblue;\n\n\t\tcolor: white;\n\t\tfont-size: base-font-size-value() * 1.5;\n\t\ttext-shadow: 1px -1px 3px black, 1px 1px 3px black, -1px 1px 3px black, -1px -1px 3px black;\n\n\t\tbackground-size: cover;\n\t\tbackground-position: center center;\n\t\tbackground-color: dodgerblue;\n\n\t\tfilter: grayscale(50%) hue-rotate(-10deg) saturate(200%);\n\n\t\t&:nth-of-type(1){\n\t\t\tbackground-image: url('../files/img/block-1.jpg');\n\t\t}\n\n\t\t&:nth-of-type(2){\n\t\t\tbackground-image: url('../files/img/block-2.jpg');\n\t\t}\n\n\t\t&:nth-of-type(3){\n\t\t\tbackground-image: url('../files/img/block-3.jpg');\n\t\t}\n\n\t\t&:nth-of-type(4){\n\t\t\tbackground-image: url('../files/img/block-4.jpg');\n\t\t}\n\n\t\t&:nth-of-type(5){\n\t\t\tbackground-image: url('../files/img/block-5.jpg');\n\t\t}\n\t}\n\n\n\n\t&:hover {\n\t\t&:before,\n\t\t> div,\n\t\t> div > div {\n\t\t\tborder-color: lightskyblue;\n\n\t\t\tbackground-image: none !important;\n\n\t\t\tfilter: none !important;\n\t\t}\n\n\t\t> div > div {\n\t\t\tfilter: invert(100%) !important;\n\t\t}\n\t}\n}\n\n\n\n#basic-grid-example {\n\t.examples > .scss-legacy {\n\t\t@include content-holder($centered:true);\n\n\n\n\t\t> .grid {\n\t\t\t@extend %example-grid;\n\n\n\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(odd){\n\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\theight: 100px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(even){\n\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\theight: 75px;\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(medium up){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 80px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 60px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 40px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\theight: 20px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(medium down){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(large){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t@include grid-item();\n\n\t\t\t\t\t\theight: 25vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\t\theight: 12.5vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t\t@include grid-item-align($vertical:bottom);\n\n\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t@include grid-item-align(center, center);\n\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\twidth: 100px;\n\t\t\t\t\t\theight: 5vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\torder: 1;\n\n\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n#advanced-grid-example {\n\t.examples > .scss-legacy {\n\t\t@include content-holder($centered:true);\n\n\n\n\t\t> .grid {\n\t\t\t@extend %example-grid;\n\n\t\t\t@include spacing-based-attribute(padding-top, 'xxl');\n\n\n\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(odd){\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t@include grid-item-align(null, end);\n\n\t\t\t\t\theight: gutter-value($direction:'vertical') * 2.5;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(even){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 75px;\n\t\t\t\t}\n\n\t\t\t\t&:first-of-type {\n\t\t\t\t\t@include grid-item($span:4, $row-span:2);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(xsmall only){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(medium){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\torder: 5;\n\n\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\theight: gutter-value() * 3;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t@include grid-item($start:8, $end:12);\n\t\t\t\t\t\torder: 4;\n\n\t\t\t\t\t\theight: 80px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t@include grid-item($start:6, $span:2);\n\t\t\t\t\t\t@include grid-item-align(full, center);\n\t\t\t\t\t\torder: 3;\n\n\t\t\t\t\t\theight: 60px;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t@include grid-item(8, $row-start:1, $row-end:3);\n\t\t\t\t\t\t@include grid-item-align('right', $vertical:'full');\n\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t\theight: auto;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t\t@include grid-item-align(left, top);\n\t\t\t\t\t\torder: 1;\n\t\t\t\t\t\tz-index: 1;\n\n\t\t\t\t\t\twidth: 200%;\n\t\t\t\t\t\theight: 55px;\n\n\t\t\t\t\t\tborder-color: red;\n\n\t\t\t\t\t\tbackground-color: red;\n\t\t\t\t\t\tbackground-image: url('../files/img/block-7.jpg');\n\n\t\t\t\t\t\ttransform: rotate(10deg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\n\t\t\t@include breakpoint(large){\n\t\t\t\t> div {\n\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:0, $row-span:1);\n\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\torder: 1;\n\n\t\t\t\t\t\twidth: auto;\n\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t\t@include grid-item($start:4, $end:8, $row-start:0, $row-span:2);\n\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\torder: 2;\n\n\t\t\t\t\t\theight: auto;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t\t@include grid-item($start:8, $span:4, $row-start:0, $row-span:3);\n\t\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\t\torder: 3;\n\n\t\t\t\t\t\theight: auto;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:1, $row-end:2);\n\t\t\t\t\t\t@include grid-item-align(right, center);\n\t\t\t\t\t\torder: 4;\n\n\t\t\t\t\t\twidth: 100px;\n\t\t\t\t\t\theight: 10vh;\n\t\t\t\t\t}\n\n\t\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t\t@include grid-item-align(stretch);\n\t\t\t\t\t\torder: 5;\n\n\t\t\t\t\t\twidth: auto;\n\t\t\t\t\t\theight: 20vh;\n\n\t\t\t\t\t\tborder-color: dodgerblue;\n\n\t\t\t\t\t\tbackground-color: dodgerblue;\n\t\t\t\t\t\tbackground-image: url('../files/img/block-8.jpg');\n\n\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n#real-world-grid-example {\n\t.examples > .scss-legacy {\n\t\t@include content-holder($centered:true);\n\n\n\n\t\t> .grid {\n\t\t\t@extend %example-grid;\n\n\n\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t&:before {\n\t\t\t\t\t\tcontent: 'Stage';\n\t\t\t\t\t}\n\n\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\torder: 1;\n\n\t\t\t\t\t@include spacing-based-attribute('height', 'xxl', 3.0);\n\n\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\tmargin-bottom: 0;\n\n\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-bottom: gutter-value($direction:vertical) * -3;\n\t\t\t\t\t}\n\n\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-bottom: gutter-value($direction:vertical) * -3;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t&:before {\n\t\t\t\t\t\tcontent: 'Navbar';\n\t\t\t\t\t}\n\n\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t@include grid-item(4, $row-span:2);\n\t\t\t\t\t\torder: 3;\n\t\t\t\t\t}\n\n\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t@include grid-item(3);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t@include grid-item();\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\t@include grid-container();\n\n\t\t\t\t\t> div {\n\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\t\tcontent: 'Text';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@include grid-item(12);\n\n\t\t\t\t\t\t\theight: spacing-value('md') * 10;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t&:before {\n\t\t\t\t\t\t\t\tcontent: 'Teaser';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t@include grid-item(12);\n\n\t\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t@include grid-item($start:0, $span:8);\n\n\t\t\t\t\t\t> div {\n\t\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t\theight: spacing-value('md') * 7;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\t\t\t\theight: 75px;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\tmargin-top: 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t@include grid-item(9);\n\n\t\t\t\t\t\t> div {\n\t\t\t\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t\t\t\theight: spacing-value('md') * 5;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t&:nth-of-type(2),\n\t\t\t\t\t\t\t&:nth-of-type(3),\n\t\t\t\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t\t\t\theight: auto;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t&:before {\n\t\t\t\t\t\tcontent: 'Hint';\n\t\t\t\t\t}\n\n\t\t\t\t\t@include grid-item($start:1, $end:11);\n\t\t\t\t\torder: 4;\n\n\t\t\t\t\tmargin-top: gutter-value($direction:'vertical') * -0.5;\n\n\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\t@include grid-item(8, $start:0);\n\t\t\t\t\t}\n\n\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\t@include grid-item($start:3, $span:6);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t&:before {\n\t\t\t\t\t\tcontent: 'Footer';\n\t\t\t\t\t}\n\n\t\t\t\t\t@include grid-item(12);\n\t\t\t\t\torder: 5;\n\n\t\t\t\t\t@include spacing-based-attributes((\n\t\t\t\t\t\t'padding-top' : 'md',\n\t\t\t\t\t\t'padding-bottom' : 'xl'\n\t\t\t\t\t));\n\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\tmargin-top: gutter-value($direction:vertical);\n\n\t\t\t\t\t@include breakpoint(medium){\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t@include breakpoint(large){\n\t\t\t\t\t\tmargin: gutter-value() * -1;\n\t\t\t\t\t\tmargin-top: gutter-value($direction:vertical) * 2.5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}