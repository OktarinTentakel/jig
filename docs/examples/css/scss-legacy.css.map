{"version":3,"file":"scss-legacy.css","sources":["main.scss","../../../source/lib/normalize/index.css","defines.scss","../../../source/scss-legacy/jig/_index.scss","../../../source/scss-legacy/jig/globals.scss","../../../source/scss-legacy/jig/util.scss","../../../source/scss-legacy/jig/breakpoints.scss","../../../source/scss-legacy/jig/grid.scss","../../../source/scss-legacy/jig/spacing.scss","examples.scss"],"sourcesContent":["@import 'normalize/index';\n@import 'defines';\n@import 'jig/_index';\n@import 'examples';\n","/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n/*# sourceMappingURL=index.css.map */\n","$JIG_CONFIG: (\n\t'breakpoints' : (\n\t\t'xsmall' : 0,\n\t\t'medium' : 768px,\n\t\t'large' : 1280px,\n\t\t'xlarge' : 1600px\n\t),\n\t'print-breakpoint' : 'large',\n\t'grid' : (\n\t\t'columns' : 12,\n\t\t'gutters' : (\n\t\t\t'horizontal' : (\n\t\t\t\t'xsmall' : 10px,\n\t\t\t\t'medium' : 20px,\n\t\t\t\t'large' : 40px\n\t\t\t),\n\t\t\t'vertical' : 20px\n\t\t)\n\t),\n\t'spacing' : (\n\t\t'xxs' : (\n\t\t\t'xsmall' : 10px\n\t\t),\n\t\t'xs' : (\n\t\t\t'xsmall' : 10px,\n\t\t\t'small' : 20px\n\t\t),\n\t\t'sm' : (\n\t\t\t'xsmall' : 20px,\n\t\t\t'large' : 30px\n\t\t),\n\t\t'md' : (\n\t\t\t'xsmall' : 30px,\n\t\t\t'xlarge' : 40px\n\t\t),\n\t\t'l' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 60px\n\t\t),\n\t\t'xl' : (\n\t\t\t'xsmall' : 40px,\n\t\t\t'medium' : 50px,\n\t\t\t'large' : 80px\n\t\t),\n\t\t'xxl' : (\n\t\t\t'xsmall': 40px,\n\t\t\t'medium': 80px,\n\t\t\t'large' : 120px\n\t\t)\n\t),\n\t'content' : (\n\t\t'padding' : (\n\t\t\t'xsmall' : 15px,\n\t\t\t'small' : 35px,\n\t\t\t'medium' : 50px,\n\t\t\t'xlarge' : 60px\n\t\t),\n\t\t'min-width' : 320px - 2 * 15px,\n\t\t'max-width' : 1920px,\n\t\t'base-font-size' : 12px\n\t)\n);\n\n$GRID_CONTAINER_BACKGROUNDCOLOR: (\n\t'xsmall' : #aaa,\n\t'medium' : #ccc,\n\t'large' : #eee\n);\n\n$GRID_CONTAINER_BACKGROUNDIMAGE: (\n\t'xsmall' : url('../files/img/background-small.jpg'),\n\t'medium' : url('../files/img/background-medium.jpg'),\n\t'large' : url('../files/img/background-large.jpg')\n);\n","@import 'globals';\n@import 'util';\n@import 'breakpoints';\n@import 'grid';\n@import 'spacing';\n","$JIG_CONFIG: null !default;\n$jig---config: null !default;\n@if (type-of($jig---config) != 'map') and (type-of($JIG_CONFIG) == 'map') {\n\t$jig---config: $JIG_CONFIG;\n}\n\n@if type-of($jig---config) != 'map' {\n\t@error 'jig:globals | jig config is undefined or not a map'\n}\n\n\n\n$jig---breakpoint-config: map-get($jig---config, 'breakpoints') !default;\n$jig---breakpoint-config: (\n\t'small' : 0,\n\t'medium' : 768px,\n\t'large' : 1280px\n) !default;\n\n\n\n$jig---grid-config: map-get($jig---config, 'grid') !default;\n$jig---grid-config: (\n\t'columns' : 12,\n\t'gutters' : (\n\t\t'horizontal' : (\n\t\t\t'small' : 20px,\n\t\t\t'medium' : 30px,\n\t\t\t'large' : 40px\n\t\t),\n\t\t'vertical' : 20px\n\t)\n) !default;\n\n\n\n$jig---spacing-config: map-get($jig---config, 'spacing') !default;\n$jig---spacing-config: (\n\t'sm' : (\n\t\t'small' : 1rem,\n\t\t'medium' : 2rem,\n\t\t'large' : 3rem\n\t),\n\t'md' : (\n\t\t'small' : 2rem,\n\t\t'medium' : 3rem,\n\t\t'large' : 5rem\n\t),\n\t'l' : (\n\t\t'small' : 3rem,\n\t\t'medium' : 5rem,\n\t\t'large' : 8rem\n\t)\n) !default;\n\n\n\n$jig---content-config: map-get($jig---config, 'content') !default;\n$jig---content-config: (\n\t'padding' : (\n\t\t'small' : 20px,\n\t\t'medium' : 40px,\n\t\t'large' : 80px\n\t),\n\t'max-width' : 1600px,\n\t'base-font-size' : 16px\n) !default;\n\n\n\n$jig---base-font-size: map-get($jig---content-config, 'base-font-size') !default;\n$jig---base-font-size: 16px !default;\n\n\n\n$jig---print-breakpoint: map-get($jig---config, 'print-breakpoint') !default;\n$jig---print-breakpoint: 'large' !default;\n","/**\n * @namespace Util\n */\n\n\n\n/**\n * @namespace Util:map-get-deep\n */\n\n/**\n * Retrieve a value deeply nested in a map, defined by a path of keys.\n *\n * @memberof Util:map-get-deep\n * @function\n * @name map-get-deep\n * @alias map-get-deep\n *\n * @param {Map} $map - the map to search in\n * @param {String|List<String>} $keys - the keys to traverse down in the map\n * @returns {*|null} the value at the defined key path or null if not defined\n *\n * @example\n * map-get-deep($foo-map, 'level1', 'level2')\n *   => value of $foo-map.level1.level2\n */\n@function map-get-deep($map, $keys...){\n\t@each $key in $keys {\n\t\t@if map-has-key($map, $key) {\n\t\t\t$map: map-get($map, $key);\n\t\t} @else {\n\t\t\t@return null;\n\t\t}\n\t}\n\n\t@return $map;\n}\n\n\n\n/**\n * @namespace Util:map-next\n */\n\n/**\n * Retrieves the value of the adjacent, next key in a map, if one exists.\n * The idea is, to retrieve the next key, based on a current one, to go one step further,\n * which is helpful for things like escalating to the next breakpoint for example.\n *\n * @memberof Util:map-next\n * @function\n * @name map-next\n * @alias map-next\n *\n * @param {Map} $map - the map to use\n * @param {String} $key - the current key, from which we want to go to the next\n * @returns {*|null} the value of the next key or null if there is none\n *\n * @example\n * map-next($foo-map, 'small')\n *   => value of $foo-map.medium\n */\n@function map-next($map, $key){\n\t$keys: map-keys($map);\n\n\t$next-index: 0;\n\t@if map-has-key($map, $key) {\n\t\t$next-index: index($keys, $key) + 1;\n\t}\n\n\t@if ($next-index == 0) or ($next-index > length($map)) {\n\t\t@return null;\n\t} @else {\n\t\t@return map-get($map, nth($keys, $next-index));\n\t}\n}\n\n\n\n/**\n * @namespace Util:strip-unit\n */\n\n/**\n * Removes the unit from a value, turning it into a unit-less value.\n *\n * @memberof Util:strip-unit\n * @function\n * @name strip-unit\n * @alias strip-unit\n *\n * @param {Number} $number - the number to strip the unit from\n * @returns {Number} the unit-less number\n *\n * @example\n * strip-unit(16px)\n *   => 16\n */\n@function strip-unit($number){\n\t@return $number / ($number * 0 + 1);\n}\n\n\n\n/**\n * @namespace Util:to-rem\n */\n\n/**\n * Convert one or more px values to (a) rem value(s), based on a base font size in px, percent or rem.\n * If the base is in % or rem, the base will be converted to px based on the global base font size.\n *\n * @memberof Util:to-rem\n * @function\n * @name to-rem\n * @alias to-rem\n *\n * @param {Number|List<Number>} $values - the value(s) to convert, usually px values, if a value is em, it will be treated as rem\n * @param {?Number} [$base=$jig---base-font-size-px] - the base size to convert against\n * @returns {Number|List<Number>} the converted value(s)\n *\n * @example\n * to-rem(32px)\n *   => 2rem\n * to-rem((10px, 20px, 40px), 20px)\n *   => [0.5rem, 1rem, 2rem]\n */\n@function to-rem($values, $base:$jig---base-font-size){\n\t@if unit($base) == '%' {\n\t\t$base: (strip-unit($base) / 100) * $jig---base-font-size;\n\t}\n\n\t@if unit($base) == 'rem' {\n\t\t$base: strip-unit($base) * $jig---base-font-size;\n\t}\n\n\t@if type-of($values) != 'list' {\n\t\t$values: [$values];\n\t}\n\n\t$rem-values: [];\n\t@each $value in $values {\n\t\t$rem-value: 0;\n\n\t\t@if unit($value) == 'em' {\n\t\t\t$rem-value: strip-unit($value);\n\t\t} @else {\n\t\t\t$rem-value: strip-unit($value) / strip-unit($base);\n\t\t}\n\n\t\t@if $rem-value != 0 {\n\t\t\t$rem-value: $rem-value * 1rem;\n\t\t}\n\n\t\t$rem-values: append($rem-values, $rem-value);\n\t}\n\n\t@if length($rem-values) == 1 {\n\t\t@return nth($rem-values, 1);\n\t} @else {\n\t\t@return $rem-values;\n\t}\n}\n\n\n\n/**\n * @namespace Util:str-join\n */\n\n/**\n * Join/concatenate two or more strings with an optional glue string.\n *\n * @memberof Util:str-join\n * @function\n * @name str-join\n * @alias str-join\n *\n * @param {String|List<String>} strings - the strings to join\n * @param {String} glue - the string to put between joined strings\n * @returns {String} the joined string\n *\n * @example\n * str-join(['fo', 'ar'], 'ob')\n *   => 'foobar'\n */\n@function str-join($strings, $glue:''){\n\t$strings: join([], $strings);\n\n\t$res: '';\n\t@each $string in $strings {\n\t\t@if $string {\n\t\t\t$res: $res+$string+$glue;\n\t\t}\n\t}\n\n\t@if ($res != '') and ($glue != '') {\n\t\t@return str-slice($res, 1, str-length($glue) * -1);\n\t} @else {\n\t\t@return $res;\n\t}\n}\n","/**\n * @namespace Breakpoints\n */\n\n\n\n$jig---auto-breakpoint: nth(map-keys($jig---breakpoint-config), 1);\n\n\n\n/**\n * @namespace Breakpoints:get-auto-breakpoint\n */\n\n/**\n * Returns the current auto breakpoint value.\n *\n * @memberof Breakpoints:get-auto-breakpoint\n * @function\n * @name get-auto-breakpoint\n * @alias get-auto-breakpoint\n *\n * @returns {String} the name of the current named auto breakpoint\n *\n * @see set-auto-breakpoint\n * @see reset-auto-breakpoint\n *\n * @example\n * get-auto-breakpoint()\n *   => 'medium'\n */\n@function get-auto-breakpoint(){\n\t@return $jig---auto-breakpoint;\n}\n\n\n\n/**\n * @namespace Breakpoints:set-auto-breakpoint\n */\n\n/**\n * Sets the auto breakpoint to a named breakpoint value.\n * Hint: in Sass we do _not_ have to do this manually, if we want to use auto breakpoint values,\n * since blocks are always evaluated _after_ the block mixin around the block, which results\n * in the block knowing the breakpoint value automatically from the mixin around it.\n *\n * @memberof Breakpoints:set-auto-breakpoint\n * @function\n * @name set-auto-breakpoint\n * @alias set-auto-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @throws error if breakpoint is unknown\n *\n * @see reset-auto-breakpoint\n\n * @example\n * \\@include set-auto-breakpoint(medium);\n * \\@include breakpoint(medium){\n *   ...\n * }\n */\n@mixin set-auto-breakpoint($breakpoint){\n\t@if map-has-key($jig---breakpoint-config, $breakpoint) {\n\t\t$jig---auto-breakpoint: $breakpoint !global;\n\t} @else {\n\t\t@error 'jig:set-current-breakpoint | unknown named breakpoint \"#{$breakpoint}\"';\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:reset-auto-breakpoint\n */\n\n/**\n * Resets the auto breakpoint to the first/smallest named breakpoint defined in the jig config.\n * Hint: this is automatically called at the end of the breakpoint mixin, so usually you should be fine\n * never calling this manually\n *\n * @memberof Breakpoints:reset-auto-breakpoint\n * @function\n * @name reset-auto-breakpoint\n * @alias reset-auto-breakpoint\n *\n * @see set-auto-breakpoint\n\n * @example\n * \\@include reset-auto-breakpoint();\n */\n@mixin reset-auto-breakpoint(){\n\t$jig---auto-breakpoint: nth(map-keys($jig---breakpoint-config), 1) !global;\n}\n\n\n\n/**\n * @namespace Breakpoints:is-named-breakpoint\n */\n\n/**\n * Returns if the given breakpoint is a registered named breakpoint to be found in the jig config.\n *\n * @memberof Breakpoints:is-named-breakpoint\n * @function\n * @name is-named-breakpoint\n * @alias is-named-breakpoint\n *\n * @param {String} $breakpoint - a named breakpoint defined in the jig config\n * @returns {Boolean} true if breakpoint is a registered named breakpoint name\n *\n * @example\n * is-named-breakpoint(medium)\n *   => true\n */\n@function is-named-breakpoint($breakpoint){\n\t@return map-has-key($jig---breakpoint-config, $breakpoint);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-range\n */\n\n/**\n * Returns a string to be used in a media query, which defines the range/bounds of a breakpoint with\n * min and/or max value.\n *\n * @memberof Breakpoints:build-breakpoint-range\n * @function\n * @name build-breakpoint-range\n * @alias build-breakpoint-range\n *\n * @param {?Number} [$min=null] - the min width of the breakpoint\n * @param {?Number} [$max=null] - the max width of the breakpoint\n * @returns {String} the media query string for the breakpoint range\n *\n * @example\n * build-breakpoint-range(0, 767px)\n *   => '(min-width: 0) and (max-width: 767px)'\n * build-breakpoint-range(null, 100rem)\n *   => '(max-width: 100rem)'\n */\n@function build-breakpoint-range($min:null, $max:null){\n\t@return str-join(\n\t\t[\n\t\t\tif($min != null, '(min-width: #{$min})', null),\n\t\t\tif($max != null, '(max-width: #{$max})', null)\n\t\t],\n\t\t' and '\n\t);\n}\n\n\n\n/**\n * @namespace Breakpoints:build-breakpoint-query\n */\n\n/**\n * Constructs a query to be used in a media query, based on a breakpoint definition.\n * Also automatically converts values to rem.\n *\n * Directions in composite definitions may be \"up\", \"down\" or \"only\".\n *\n * You may also define the special breakpoints \"landscape\" or \"portrait\" to cover device orientations.\n *\n * @memberof Breakpoints:build-breakpoint-query\n * @function\n * @name build-breakpoint-query\n * @alias build-breakpoint-query\n *\n * @param {?Number|Literal|List<String>} [$breakpoint-definition=0] - either a simple number or a composite definition of width and direction, where the width may either be a number or a name defined in the named breakpoints\n * @returns {String} the media query string for the breakpoint definition\n * @throws error if named breakpoint is unknown\n * @throws error if an unnamed breakpoint has an \"only\" direction\n *\n * @example\n * build-breakpoint-query(200rem)\n *   => '(min-width: 200rem)'\n * build-breakpoint-query(small down)\n *   => '(max-width: 199rem)'\n * build-breakpoint-query(('large' 'only'))\n *   => '(min-width: 200rem) and (max-width: 499rem)'\n * build-breakpoint-query(1024px only)\n *   => '(min-width: 64rem) and (max-width: 64rem)'\n * build-breakpoint-query(landscape)\n *   => '(orientation: landscape)'\n */\n@function build-breakpoint-query($breakpoint-definition:0){\n\t$breakpoint: if($breakpoint-definition and (length($breakpoint-definition) > 0), nth($breakpoint-definition, 1), 0);\n\t$direction: if($breakpoint-definition and (length($breakpoint-definition) > 1), nth($breakpoint-definition, 2), 'up');\n\t$breakpoint-name: null;\n\t$next-breakpoint: null;\n\t$min: null;\n\t$max: null;\n\t$query-rem-conversion-base: 16px; // this is always 16px, no matter what is defined on <html>\n\n\t@if $breakpoint == 'overwrite' {\n\t\t@return '(min-width: 0)';\n\t} @else if ($breakpoint == 'landscape') or ($breakpoint == 'portrait') {\n\t\t@return '(orientation: #{$breakpoint})';\n\t} @else if type-of($breakpoint) == 'string' {\n\t\t@if is-named-breakpoint($breakpoint) {\n\t\t\t$breakpoint-name: $breakpoint;\n\t\t\t$breakpoint: map-get($jig---breakpoint-config, $breakpoint-name);\n\t\t\t$next-breakpoint: map-next($jig---breakpoint-config, $breakpoint-name);\n\t\t} @else {\n\t\t\t@error 'jig:build-breakpoint-query | \"#{$breakpoint-definition}\" is not a defined breakpoint';\n\t\t}\n\t}\n\n\t@if ($breakpoint-name == null) and ($direction == 'only') {\n\t\t@error 'jig:build-breakpoint-query | only named media queries can have an \"only\" range';\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'up') {\n\t\t$min: to-rem($breakpoint, $query-rem-conversion-base);\n\t}\n\n\t@if ($direction == 'only') or ($direction == 'down') {\n\t\t@if $breakpoint-name == null {\n\t\t\t$max: to-rem($breakpoint, $query-rem-conversion-base);\n\t\t} @else if $next-breakpoint != null {\n\t\t\t$max: to-rem($next-breakpoint, $query-rem-conversion-base) - to-rem(1px, $query-rem-conversion-base);\n\t\t}\n\t}\n\n\t@if ($min == 0) and ($max == null){\n\t\t$min: null;\n\t}\n\n\t@return build-breakpoint-range($min, $max);\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint\n */\n\n/**\n * Renders media queries based one one or more breakpoint definitions.\n *\n * @memberof Breakpoints:breakpoint\n * @function\n * @name breakpoint\n * @alias breakpoint\n *\n * @param {Number|Literal|List<String>|List<Literal>|List<List<String>>} $breakpoint-definitions - a list of breakpoint definitions according to build-breakpoint-query\n *\n * @example\n * \\@include breakpoint(small){\n *   ...\n * }\n * \\@include breakpoint(small down, large up){\n *   ...\n * }\n */\n@mixin breakpoint($breakpoint-definitions...){\n\t@each $breakpoint-definition in $breakpoint-definitions {\n\t\t$query: build-breakpoint-query($breakpoint-definition);\n\t\t$breakpoint: if(length($breakpoint-definition) > 0, nth($breakpoint-definition, 1), 0);\n\t\t$direction: if(length($breakpoint-definition) > 1, nth($breakpoint-definition, 2), 'up');\n\t\t$breakpoint-index: index(map-keys($jig---breakpoint-config), nth($breakpoint-definition, 1));\n\t\t$print-breakpoint-index: index(map-keys($jig---breakpoint-config), $jig---print-breakpoint);\n\n\t\t// set current breakpoint var to mixin breakpoint value to allow for auto-evaluation inside\n\t\t@if is-named-breakpoint($breakpoint){\n\t\t\t@include set-auto-breakpoint($breakpoint);\n\t\t}\n\n\t\t@if $query == '' {\n\t\t\t@content;\n\t\t} @else {\n\t\t\t@if(\n\t\t\t\t($breakpoint-index != null)\n\t\t\t\tand (\n\t\t\t\t\t($breakpoint-index <= $print-breakpoint-index)\n\t\t\t\t\tor ($direction == 'down')\n\t\t\t\t)\n\t\t\t){\n\t\t\t\t@media print, screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t} @else {\n\t\t\t\t@media screen and #{$query} {\n\t\t\t\t\t@content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// restore initial value after mixin has been rendered\n\t\t@include reset-auto-breakpoint();\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:breakpoint-value\n */\n\n/**\n * Search for a value, defined for a breakpoint, in a given map of values.\n * The function escalates in a mobile-first manner. So we take the value for the smallest breakpoint\n * and step up the breakpoints one by one until we reach the defined breakpoint. So, if we want the\n * according value for \"large\", but we only have a value for \"medium\", we'll get the \"medium\" value, which,\n * in mobile-first manner, escalates upwards and is the \"large\" value if nothing else is defined.\n *\n * @memberof Breakpoints:breakpoint-value\n * @function\n * @name breakpoint-value\n * @alias breakpoint-value\n *\n * @param {*|Map} $value - a map of breakpoint-keyed map of values, or a simple value\n * @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named breakpoints\n * @returns {*|null} the breakpoint value or null if nothing was found\n * @throws error if named breakpoint is unknown\n *\n * @example\n * breakpoint-value(\n *   (\n *     'small' : 10px,\n *     'medium' : 20px\n *   ),\n *   large\n * )\n *   => 20px\n */\n@function breakpoint-value($value, $breakpoint:'auto'){\n\t@if ($breakpoint != 'auto') and not map-has-key($jig---breakpoint-config, $breakpoint) {\n\t\t@error 'jig:breakpoint-value | given breakpoint \"#{$breakpoint}\" not defined';\n\t}\n\n\t@if type-of($value) == 'map' {\n\t\t$res: null;\n\n\t\t@if $breakpoint == 'auto' {\n\t\t\t$breakpoint: get-auto-breakpoint();\n\t\t}\n\n\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t$breakpoint-value: map-get($value, $breakpoint-name);\n\n\t\t\t@if $breakpoint-value != null {\n\t\t\t\t$res: $breakpoint-value;\n\t\t\t}\n\n\t\t\t@if $breakpoint-name == $breakpoint {\n\t\t\t\t@return $res;\n\t\t\t}\n\t\t}\n\n\t\t@return null;\n\t} @else {\n\t\t@return $value;\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attributes-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attributes for defined breakpoints.\n *\n * Definitions will be rendered together if possible, minimizing the amount of media queries.\n * However, each call of this mixin will, most likely, render multiple media queries, so keep a close eye\n * on your media query structure to avoid unnecessarily doubled definitions and keep media queries to a minimum.\n * If in doubt, it might be a better idea to write the queries manually, perhaps rather using `map-get` or\n * `breakpoint-value` to automatically pull values from breakpoint value maps.\n *\n * @memberof Breakpoints:attributes-for-breakpoints\n * @function\n * @name attributes-for-breakpoints\n * @alias attributes-for-breakpoints\n *\n * @see attribute-for-breakpoints\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @example\n * \\@include attributes-for-breakpoints(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : (\n *       'small' : 1,\n *       'large' : 1.25\n *     ),\n *     'margin-top' : (\n *       'small' : 10px,\n *       'medium' : 20px\n *     )\n *   ),\n *   2.0\n * );\n */\n@mixin attributes-for-breakpoints($attributes, $factor:null){\n\t$attributes-for-breakpoints: ();\n\t@each $attribute-name, $attribute-value in $attributes {\n\t\t@if type-of($attribute-value) != 'map' {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t} @else {\n\t\t\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t\t\t$breakpoint-value: map-get($attribute-value, $breakpoint-name);\n\t\t\t\t@if $breakpoint-value != null {\n\t\t\t\t\t$breakpoint-attributes: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t\t\t\t@if $breakpoint-attributes == null {\n\t\t\t\t\t\t$breakpoint-attributes: ();\n\t\t\t\t\t}\n\n\t\t\t\t\t$breakpoint-attributes: map-merge(\n\t\t\t\t\t\t$breakpoint-attributes,\n\t\t\t\t\t\t($attribute-name : $breakpoint-value)\n\t\t\t\t\t);\n\n\t\t\t\t\t$attributes-for-breakpoints: map-merge(\n\t\t\t\t\t\t$attributes-for-breakpoints,\n\t\t\t\t\t\t($breakpoint-name : $breakpoint-attributes)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@each $breakpoint-name, $breakpoint-definition in $jig---breakpoint-config {\n\t\t$breakpoint-attributes: map-get($attributes-for-breakpoints, $breakpoint-name);\n\t\t@if ($breakpoint-attributes != null) and (length(map-keys($breakpoint-attributes)) > 0) {\n\t\t\t@include breakpoint($breakpoint-name){\n\t\t\t\t@each $attribute-name, $attribute-value in $breakpoint-attributes {\n\t\t\t\t\t@if $factor == null {\n\t\t\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t\t\t} @else {\n\t\t\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:attribute-for-breakpoints\n */\n\n/**\n * Renders attribute values for given attribute for defined breakpoints.\n *\n * This is the single attribute version of `attributes-for-breakpoints`.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @memberof Breakpoints:attribute-for-breakpoints\n * @function\n * @name attribute-for-breakpoints\n * @alias attribute-for-breakpoints\n *\n * @see attributes-for-breakpoints\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include attribute-for-breakpoints(\n *   'line-height',\n *   (\n *     'small' : 1,\n *     'large' : 1.25\n *   ),\n *   1.0\n * );\n */\n@mixin attribute-for-breakpoints($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $value));\n\t@include attributes-for-breakpoints($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attributes\n */\n\n/**\n * Use this, if you need to overwrite attribute values previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attributes\n * @function\n * @name overwrite-breakpoint-for-attributes\n * @alias overwrite-breakpoint-for-attributes\n *\n * @param {Map} $attributes - keys are attribute names, while values are either plain values or maps with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @see overwrite-breakpoint-for-attribute\n *\n * @example\n * \\@include overwrite-breakpoint-for-attributes(\n *   (\n *     'font-size' : 12px,\n *     'line-height' : 1.25\n *     'margin-top' : 20px\n *   ),\n *   2.0\n * );\n */\n@mixin overwrite-breakpoint-for-attributes($attributes, $factor:null){\n\t@include breakpoint('overwrite'){\n\t\t@each $attribute-name, $attribute-value in $attributes {\n\t\t\t@if $factor == null {\n\t\t\t\t#{$attribute-name}: $attribute-value;\n\t\t\t} @else {\n\t\t\t\t#{$attribute-name}: ($factor * $attribute-value);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint-for-attribute\n */\n\n/**\n * Use this, if you need to overwrite an attribut value previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @memberof Breakpoints:overwrite-breakpoint-for-attribute\n * @function\n * @name overwrite-breakpoint-for-attribute\n * @alias overwrite-breakpoint-for-attribute\n *\n * @see overwrite-breakpoint-for-attributes\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * \\@include overwrite-breakpoint-for-attribute(font-size, 12px, 2.0);\n */\n@mixin overwrite-breakpoint-for-attribute($attribute, $value, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $value));\n\t@include overwrite-breakpoint-for-attributes($attributes, $factor);\n}\n\n\n\n/**\n * @namespace Breakpoints:overwrite-breakpoint\n */\n\n/**\n * Use this, if you need to overwrite something previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to redefine something statically in an override situation, which has\n * been defined responsively before.\n *\n * @memberof Breakpoints:overwrite-breakpoint\n * @function\n * @name overwrite-breakpoint\n * @alias overwrite-breakpoint\n *\n * @example\n * \\@include overwrite-breakpoint(){\n *   font-size: 12xp;\n *   margin-top: 20px;\n * }\n */\n@mixin overwrite-breakpoint(){\n\t@include breakpoint('overwrite'){\n\t\t@content;\n\t}\n}\n","/**\n * @namespace Grid\n */\n\n\n\n/**\n * @namespace Grid:grid-container\n */\n\n/**\n * Renders the basic properties of a grid container, which is the bracket element for elements, which are\n * to be placed in a grid, thereby making the container, more or less, \"the grid itself\".\n *\n * The basic characteristic of this container is the pre-definition of usable grid columns, according to our config.\n *\n * @memberof Grid:grid-container\n * @function\n * @name grid-container\n * @alias grid-container\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-container();\n */\n@mixin grid-container(){\n\tdisplay: grid;\n\tgrid-auto-flow: row;\n\tgrid-template-columns: repeat(map-get($jig---grid-config, 'columns'), 1fr);\n\t@include attributes-for-breakpoints((\n\t\t'grid-column-gap' : map-get-deep($jig---grid-config, 'gutters', 'horizontal'),\n\t\t'grid-row-gap' : map-get-deep($jig---grid-config, 'gutters', 'vertical')\n\t));\n}\n\n\n\n/**\n * @namespace Grid:grid-item\n */\n\n/**\n * Renders the basic properties of a grid item, which is an item inside a grid, being placed according to\n * pre-defined columns.\n *\n * The main purpose of this mixin is, to define the space, the item takes inside the grid. To do this, there are\n * several means of definition. Either just giving it a column-based width, aligning it at the end of other,\n * already existing items, or defining a specific area it should cover, by explicitly defining a start and end column\n * or a combination of both.\n *\n * Additionally, the item may also be defined to take up more than one row, adding the native grid capabilities to\n * our concepts.\n *\n * @memberof Grid:grid-item\n * @function\n * @name grid-item\n * @alias grid-item\n *\n * @param {?Number} [$span=null] - the width of the item in columns\n * @param {?Number} [$start=null] - the horizontal start offset of the item in columns, may be combined with end or span\n * @param {?Number} [$end=null] - the horizontal end offset of the item in columns, may be combined with start or span\n * @param {?Number} [$row-span=null] - the height of the item in rows\n * @param {?Number} [$row-start=null] - the vertical start offset of the item in rows, may be combined with row-end or row-span\n * @param {?Number} [$row-end=null] - the vertical end offset of the item in rows, may be combined with row-start or row-span\n *\n * @see grid-container\n * @see grid-item-align\n *\n * @example\n * \\@include grid-item(12);\n * \\@include grid-item(6, 6);\n * \\@include grid-item(null, 2, 2);\n * \\@include grid-item(6, null, null, 2);\n * \\@include grid-item(6, null, null, null, 0, 5);\n */\n@mixin grid-item(\n\t$span:null,\n\t$start:null,\n\t$end:null,\n\t$row-span:null,\n\t$row-start:null,\n\t$row-end:null\n){\n\t@if ($span == null) and ($start == null) {\n\t\tgrid-column-end: span map-get($jig---grid-config, 'columns');\n\t} @else {\n\t\t@if $span != null {\n\t\t\tgrid-column-end: span $span;\n\t\t}\n\n\t\t@if $start != null {\n\t\t\tgrid-column-start: $start + 1;\n\t\t}\n\n\t\t@if ($end != null) and ($span == null) {\n\t\t\tgrid-column-end: $end + 1;\n\t\t}\n\t}\n\n\t@if ($row-span != null) or ($row-start != null) {\n\t\t@if $row-span != null {\n\t\t\tgrid-row-end: span $row-span;\n\t\t}\n\n\t\t@if $row-start != null {\n\t\t\tgrid-row-start: $row-start + 1;\n\t\t}\n\n\t\t@if ($row-end != null) and ($row-span == null) {\n\t\t\tgrid-row-end: $row-end + 1;\n\t\t}\n\t}\n}\n\n\n\n/**\n * @namespace Grid:grid-item-align\n */\n\n/**\n * Renders properties of a grid item, to define the item's alignment inside the area defined for the item using\n * the grid-item mixin. The usage of this only make sense for grid items.\n *\n * @memberof Grid:grid-item-align\n * @function\n * @name grid-item-align\n * @alias grid-item-align\n *\n * @param {String} [$horizontal=null] - \"left\"/\"start\", \"right\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n * @param {String} [$vertical=null] - \"top\"/\"start\", \"bottom\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n *\n * @see grid-item\n *\n * @example\n * \\@include grid-item-align('left');\n * \\@include grid-item-align(center, center);\n * \\@include grid-item-align(null, 'full');\n */\n@mixin grid-item-align($horizontal:null, $vertical:null){\n\t@if $horizontal == 'left' {\n\t\t$horizontal: 'start';\n\t} @else if $horizontal == 'right' {\n\t\t$horizontal: 'end';\n\t} @else if $horizontal == 'middle' {\n\t\t$horizontal: 'center';\n\t} @else if $horizontal == 'full' {\n\t\t$horizontal: 'stretch';\n\t}\n\n\t@if $vertical == 'top' {\n\t\t$vertical: 'start';\n\t} @else if $vertical == 'bottom' {\n\t\t$vertical: 'end';\n\t} @else if $vertical == 'middle' {\n\t\t$vertical: 'center';\n\t} @else if $vertical == 'full' {\n\t\t$vertical: 'stretch';\n\t}\n\n\t@if $horizontal != null {\n\t\tjustify-self: unquote($horizontal);\n\t}\n\n\t@if $vertical != null {\n\t\talign-self: unquote($vertical);\n\t}\n}\n\n\n\n/**\n * @namespace Grid:gutter-value\n */\n\n/**\n * Returns the value of the defined distance between two columns/rows for a breakpoint.\n *\n * The main usage for this is, to define a property value based on the current gutter.\n * This is why the parameter order may seem flipped, but usually, you'd use this inside a breakpoint\n * using auto-breakpoint detection, primarily rather working with the value itself. For other cases:\n * Remember, that that you can simply use named parameters.\n *\n * @memberof Grid:gutter-value\n * @function\n * @name gutter-value\n * @alias gutter-value\n *\n * @param {Number} [$factor=1.0] - factor to apply to the finally evaluated gutter value, most helpful to get half a gutter for example\n * @param {Number} [$add=0] - value to add to the finally evaluated gutter value, may also be negative to subtract\n * @param {String} [$direction='horizontal'] - either \"horizontal\" or \"vertical\", determines the gutter direction in the grid\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @returns {Number} the determined gutter value with applied factor and/or addition\n * @throws error if no gutter value could be determined, based on given breakpoint and/or direction\n *\n * @example\n * \\@include breakpoint(medium){\n *   padding-left: gutter-value(0.5);\n * }\n * margin-top: gutter-value($direction:'vertical', $breakpoint:'small');\n */\n@function gutter-value($factor:1.0, $add:0, $direction:'horizontal', $breakpoint:'auto'){\n\t$gutter: map-get-deep($jig---grid-config, 'gutters', $direction);\n\t$res: null;\n\n\t@if $gutter != null {\n\t\t@if type-of($gutter) == 'map' {\n\t\t\t$res: breakpoint-value($gutter, $breakpoint);\n\t\t} @else {\n\t\t\t$res: $gutter;\n\t\t}\n\t}\n\n\t@if $res == null {\n\t\t@error 'jig:gutter-value | could not resolve gutter, check direction and/or breakpoint';\n\t}\n\n\t@return ($res * $factor) + $add;\n}\n","/**\n * @namespace Spacing\n */\n\n\n\n/**\n * @namespace Spacing:spacing-value\n */\n\n/**\n * Return a spacing value defined in the jig config, based on a breakpoint.\n *\n * @memberof Spacing:spacing-value\n * @function\n * @name spacing-value\n * @alias spacing-value\n *\n * @param {String} $size - on of the named sized defined in jig's spacing config (e.g. sm, l, xxl, ...)\n * @param {Literal|String} [$breakpoint='auto'] - either \"auto\" (to use the current breakpoint) or one of the defined named breakpoints\n * @returns {Number|null} the spacing value or null if nothing was found\n * @throws error if size is unknown\n *\n * @example\n * spacing-value(sm)\n *   => 12px\n * spacing-value(md, large)\n *   => 5rem\n */\n@function spacing-value($size, $breakpoint:'auto'){\n\t$spacing: map-get($jig---spacing-config, $size);\n\n\t@if $spacing == null {\n\t\t@error 'jig:spacing-value | unknown size \"#{$size}\"';\n\t}\n\n\t@if type-of($spacing) == 'map' {\n\t\t@return breakpoint-value($spacing, $breakpoint);\n\t} @else {\n\t\t@return $spacing;\n\t}\n}\n\n\n\n/**\n * @namespace Spacing:spacing-based-attributes\n */\n\n/**\n * Define (an) attribute(s) based on breakpoint-dependent spacing values.\n * This will render the given attributes with the corresponding spacing values for each defined breakpoint\n * in compiled media queries. Since this will result in many media queries being rendered, make sure before,\n * that there aren't many other media queries also needed to complete your definition. In that case, it might be\n * better and more performant to rather write the queries manually and get the spacing values via `[]` or\n * `spacing-value`.\n *\n * @memberof Spacing:spacing-based-attributes\n * @function\n * @name spacing-based-attributes\n * @alias spacing-based-attributes\n *\n * @param {Map} $attributes - keys are attribute names, while values are spacing sizes\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n * @throws error if size is unknown\n *\n * @see spacing-based-attribute\n *\n * @example\n * \\@include spacing-based-attributes(\n *   (\n *     'padding-top' : 'sm',\n *     'padding-right' : 'md',\n *     'padding-bottom' : 'sm'\n *     'padding-left' : 'md'\n *     'margin-top' : 'l',\n *     'margin-bottom' : 'xl'\n *   ),\n *   2.0\n * );\n */\n@mixin spacing-based-attributes($attributes, $factor:null){\n\t$spacing-attributes: ();\n\t@each $attribute-name, $attribute-size in $attributes {\n\t\t$size-definition: map-get($jig---spacing-config, $attribute-size);\n\n\t\t@if $size-definition == null {\n\t\t\t@error 'jig:spacing-based-attributes | unknown size \"#{$size-definition}\"';\n\t\t}\n\n\t\t$spacing-attributes: map-merge($spacing-attributes, ($attribute-name : $size-definition));\n\t}\n\n\t@include attributes-for-breakpoints($spacing-attributes, $factor);\n}\n\n\n\n/**\n * @namespace Spacing:spacing-based-attribute\n */\n\n/**\n * Define an attribute based on breakpoint-dependent spacing values.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @memberof Spacing:spacing-based-attribute\n * @function\n * @name spacing-based-attribute\n * @alias spacing-based-attribute\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {String} $size - on of the named sized defined in jig's spacing config (sm, l, xxl, ...)\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n * @throws error if size is unknown\n *\n * @see spacing-based-attributes\n *\n * @example\n * \\@include spacing-based-attribute(margin-top, 'xl', 1.0);\n */\n@mixin spacing-based-attribute($attribute, $size, $factor:null){\n\t$attributes: ();\n\t$attributes: map-merge($attributes, ('#{$attribute}' : $size));\n\t@include spacing-based-attributes($attributes, $factor);\n}\n","%example-grid {\n\t@include grid-container();\n\n\tposition: relative;\n\n\tpadding: gutter-value();\n\tborder: 3px solid red;\n\n\t&:before {\n\t\tcontent: '';\n\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\n\t\tbackground-size: cover;\n\t\tbackground-position: center center;\n\t\t@include attributes-for-breakpoints((\n\t\t\t'background-color' : $GRID_CONTAINER_BACKGROUNDCOLOR,\n\t\t\t'background-image' : $GRID_CONTAINER_BACKGROUNDIMAGE\n\t\t));\n\n\t\tfilter: saturate(150%) brightness(38%);\n\t}\n\n\t@include breakpoint(medium){\n\t\tpadding: gutter-value();\n\t}\n\n\t@include breakpoint(large){\n\t\tpadding: gutter-value($breakpoint:large);\n\t}\n\n\n\n\t> div {\n\t\tposition: relative;\n\n\t\tborder: 3px solid dodgerblue;\n\n\t\tbackground-size: cover;\n\t\tbackground-position: center center;\n\t\tbackground-color: dodgerblue;\n\n\t\tfilter: grayscale(50%) hue-rotate(-10deg) saturate(200%);\n\n\t\t&:nth-of-type(1){\n\t\t\tbackground-image: url('../files/img/block-1.jpg');\n\t\t}\n\n\t\t&:nth-of-type(2){\n\t\t\tbackground-image: url('../files/img/block-2.jpg');\n\t\t}\n\n\t\t&:nth-of-type(3){\n\t\t\tbackground-image: url('../files/img/block-3.jpg');\n\t\t}\n\n\t\t&:nth-of-type(4){\n\t\t\tbackground-image: url('../files/img/block-4.jpg');\n\t\t}\n\n\t\t&:nth-of-type(5){\n\t\t\tbackground-image: url('../files/img/block-5.jpg');\n\t\t}\n\t}\n\n\n\n\t&:hover {\n\t\t&:before,\n\t\t> div {\n\t\t\tbackground-image: none !important;\n\n\t\t\tfilter: none !important;\n\t\t}\n\t}\n}\n\n\n\n#basic-grid-example {\n\t.examples > .scss-legacy {\n\t\t@extend %example-grid;\n\n\n\n\t\t> div {\n\t\t\t&:nth-of-type(odd){\n\t\t\t\t@include grid-item(6);\n\n\t\t\t\theight: 100px;\n\t\t\t}\n\n\t\t\t&:nth-of-type(even){\n\t\t\t\t@include grid-item(6);\n\n\t\t\t\theight: 75px;\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium up){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 100px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 80px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 60px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 40px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t@include grid-item(4);\n\n\t\t\t\t\theight: 20px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium down){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(large){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t@include grid-item();\n\n\t\t\t\t\theight: 25vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t@include grid-item(6);\n\n\t\t\t\t\theight: 12.5vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t@include grid-item-align($vertical:bottom);\n\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t@include grid-item-align(center, center);\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 5vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\torder: 1;\n\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n#advanced-grid-example {\n\t.examples > .scss-legacy {\n\t\t@extend %example-grid;\n\n\t\t@include spacing-based-attribute(padding-top, 'xxl');\n\n\n\n\t\t> div {\n\t\t\t&:nth-of-type(odd){\n\t\t\t\t@include grid-item(4);\n\t\t\t\t@include grid-item-align(null, end);\n\n\t\t\t\theight: gutter-value(2.5, $direction:'vertical');\n\t\t\t}\n\n\t\t\t&:nth-of-type(even){\n\t\t\t\t@include grid-item(4);\n\n\t\t\t\theight: 75px;\n\t\t\t}\n\n\t\t\t&:first-of-type {\n\t\t\t\t@include grid-item($span:4, $row-span:2);\n\t\t\t\t@include grid-item-align($vertical:full);\n\n\t\t\t\theight: auto;\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(xsmall only){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\tborder-color: aqua;\n\n\t\t\t\t\tbackground-color: aqua;\n\t\t\t\t\tbackground-image: url('../files/img/block-6.jpg');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(medium){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\torder: 5;\n\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\theight: gutter-value(3.0);\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t@include grid-item($start:8, $end:12);\n\t\t\t\t\torder: 4;\n\n\t\t\t\t\theight: 80px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t@include grid-item($start:6, $span:2);\n\t\t\t\t\t@include grid-item-align(full, center);\n\t\t\t\t\torder: 3;\n\n\t\t\t\t\theight: 60px;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t@include grid-item(8, $row-start:1, $row-end:3);\n\t\t\t\t\t@include grid-item-align('right', $vertical:'full');\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t@include grid-item(4);\n\t\t\t\t\t@include grid-item-align(left, top);\n\t\t\t\t\torder: 1;\n\t\t\t\t\tz-index: 1;\n\n\t\t\t\t\twidth: 200%;\n\t\t\t\t\theight: 55px;\n\n\t\t\t\t\tborder-color: red;\n\n\t\t\t\t\tbackground-color: red;\n\t\t\t\t\tbackground-image: url('../files/img/block-7.jpg');\n\n\t\t\t\t\ttransform: rotate(10deg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\n\t\t@include breakpoint(large){\n\t\t\t> div {\n\t\t\t\t&:nth-of-type(1){\n\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:0, $row-span:1);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 1;\n\n\t\t\t\t\twidth: auto;\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(2){\n\t\t\t\t\t@include grid-item($start:4, $end:8, $row-start:0, $row-span:2);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 2;\n\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(3){\n\t\t\t\t\t@include grid-item($start:8, $span:4, $row-start:0, $row-span:3);\n\t\t\t\t\t@include grid-item-align($vertical:full);\n\t\t\t\t\torder: 3;\n\n\t\t\t\t\theight: auto;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(4){\n\t\t\t\t\t@include grid-item($start:0, $span:4, $row-start:1, $row-end:2);\n\t\t\t\t\t@include grid-item-align(right, center);\n\t\t\t\t\torder: 4;\n\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 10vh;\n\t\t\t\t}\n\n\t\t\t\t&:nth-of-type(5){\n\t\t\t\t\t@include grid-item(6);\n\t\t\t\t\t@include grid-item-align(stretch);\n\t\t\t\t\torder: 5;\n\n\t\t\t\t\twidth: auto;\n\t\t\t\t\theight: 20vh;\n\n\t\t\t\t\tborder-color: dodgerblue;\n\n\t\t\t\t\tbackground-color: dodgerblue;\n\t\t\t\t\tbackground-image: url('../files/img/block-8.jpg');\n\n\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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"}