{"version":3,"sources":["../../../source/lib/normalize/index.css","examples.styl","../../../source/stylus/jig/grid.styl","../../../source/stylus/jig/breakpoints.styl"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;ACFC,wCCOA,QAAQ,KACR,eAAe,IACf,sBAAsB,eC4LH,aAAE,KApFX,sCAAA,wCAqGW,gBAAE,MArGb,0CAAA,wCAqGW,gBAAE,MArGb,0CAAA,wCAqGW,gBAAE,MArGb,sCAAA,wCAqGW,iBAAE,SArGb,0CAAA,wCAqGW,iBAAE,SArGb,0CAAA,wCAqGW,iBAAE,SF/MtB,8CACC,iBAAiB,QAEjB,+DC+CA,gBAAgB,OD5Cf,OAAO,MAER,gEC0CA,gBAAgB,ODvCf,OAAO,KE+FA,0CFzFP,6DCiCD,gBAAgB,OD9Bd,OAAO,MAER,6DC4BD,gBAAgB,ODzBd,OAAO,KAER,6DCuBD,gBAAgB,ODpBd,OAAO,KAER,6DCkBD,gBAAgB,ODfd,OAAO,KAER,6DCaD,gBAAgB,ODVd,OAAO,MEkED,+CF5DP,6DACC,iBAAiB,ME2DX,0CFrDP,6DCNF,gBAAgB,QDSb,OAAO,KAER,6DCRD,gBAAgB,ODWd,OAAO,OAER,6DCbD,gBAAgB,OAuDjB,WAAW,IDtCR,OAAO,KAER,6DCnBD,gBAAgB,OAoDjB,aAAa,OAGb,WAAW,ODjCR,MAAM,EAEN,MAAM,MACN,OAAO,IAER,6DC3BD,gBAAgB,OD6Bd,MAAM,EAEN,OAAO,MAIX,2CCrFA,QAAQ,KACR,eAAe,IACf,sBAAsB,eC4LH,aAAE,KApFX,sCAAA,2CAqGW,gBAAE,MArGb,0CAAA,2CAqGW,gBAAE,MArGb,0CAAA,2CAqGW,gBAAE,MArGb,sCAAA,2CAqGW,YAAE,MArGb,0CAAA,2CAqGW,YAAE,MArGb,0CAAA,2CAqGW,YAAE,OArGb,sCAAA,2CAqGW,iBAAE,SArGb,0CAAA,2CAqGW,iBAAE,SArGb,0CAAA,2CAqGW,iBAAE,SFjHtB,iDACC,iBAAiB,QAEjB,kEC/CA,gBAAgB,ODkDf,OAAO,KAER,mECpDA,gBAAgB,OAuDjB,WAAW,IDCT,OAAO,KAER,+DC1DA,gBAAgB,OAUhB,aAAa,ODmDZ,OAAO,KELA,iEFWP,gEACC,iBAAiB,MEZX,0CFkBP,gEC1ED,gBAAgB,OD4Ed,MAAM,EAEN,MAAM,IACN,OAAO,KAER,gEC9ED,kBAA4B,EAG5B,gBAAwB,GD6EtB,MAAM,EAEN,OAAO,KAER,gECvFD,gBAAgB,OAGhB,kBAA4B,EAiD7B,aAAa,QAGb,WAAW,ODmCR,MAAM,EAEN,OAAO,KAER,gEC9FD,gBAAgB,OAahB,eAA6B,EAG7B,aAAyB,EAoC1B,aAAa,IAGb,WAAW,QD0CR,MAAM,EAEN,MAAM,IACN,OAAO,KAER,gECtGD,gBAAgB,OAoDjB,aAAa,MAGb,WAAW,MDkDR,MAAM,EACN,QAAQ,EAER,MAAM,KACN,OAAO,KAEP,iBAAiB,KACjB,UAAU,cExDJ,0CF8DP,gECtHD,gBAAgB,OAGhB,kBAA4B,EAO5B,aAAa,OAGb,eAA6B,EA0C9B,WAAW,QDkER,MAAM,EAEN,MAAM,KACN,OAAO,KAER,gEC3HD,kBAA4B,EAG5B,gBAAwB,EAIxB,aAAa,OAGb,eAA6B,EA0C9B,WAAW,QD0ER,MAAM,EAEN,OAAO,KAER,gECrID,gBAAgB,OAGhB,kBAA4B,EAO5B,aAAa,OAGb,eAA6B,EA0C9B,WAAW,QDiFR,MAAM,EAEN,OAAO,KAER,gEC5ID,gBAAgB,OAGhB,kBAA4B,EAU5B,eAA6B,EAG7B,aAAyB,EAoC1B,aAAa,IAGb,WAAW,ODwFR,MAAM,EAEN,MAAM,MACN,OAAO,KAER,gECpJD,gBAAgB,OAoDjB,aAAa,QDmGV,MAAM,EAEN,MAAM,KACN,OAAO,KAEP,iBAAiB,QACjB,UAAU","file":"stylus.css","sourcesContent":["/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px}[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}\n\n/*# sourceMappingURL=index.css.map */\n","#basic-grid-example\n\t.examples > .stylus\n\t\tgrid-container()\n\n\t\tattribute-for-breakpoints(background-color, $GRID_CONTAINER_BACKGROUNDCOLOR)\n\n\n\n\t\t> div\n\t\t\tbackground-color gray\n\n\t\t\t&:nth-of-type(odd)\n\t\t\t\tgrid-item(6)\n\n\t\t\t\theight 100px\n\n\t\t\t&:nth-of-type(even)\n\t\t\t\tgrid-item(6)\n\n\t\t\t\theight 75px\n\n\n\n\t\t+breakpoint(medium up)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(1)\n\t\t\t\t\tgrid-item(4)\n\n\t\t\t\t\theight 100px\n\n\t\t\t\t&:nth-of-type(2)\n\t\t\t\t\tgrid-item(4)\n\n\t\t\t\t\theight 80px\n\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tgrid-item(4)\n\n\t\t\t\t\theight 60px\n\n\t\t\t\t&:nth-of-type(4)\n\t\t\t\t\tgrid-item(4)\n\n\t\t\t\t\theight 40px\n\n\t\t\t\t&:nth-of-type(5)\n\t\t\t\t\tgrid-item(4)\n\n\t\t\t\t\theight 20px\n\n\n\n\t\t+breakpoint(medium down)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tbackground-color aqua\n\n\n\n\t\t+breakpoint(large)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(1)\n\t\t\t\t\tgrid-item()\n\n\t\t\t\t\theight 25vh\n\n\t\t\t\t&:nth-of-type(2)\n\t\t\t\t\tgrid-item(6)\n\n\t\t\t\t\theight 12.5vh\n\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tgrid-item(6)\n\t\t\t\t\tgrid-item-align($vertical:bottom)\n\n\t\t\t\t\theight 10vh\n\n\t\t\t\t&:nth-of-type(4)\n\t\t\t\t\tgrid-item(4)\n\t\t\t\t\tgrid-item-align(center, center)\n\t\t\t\t\torder 2\n\n\t\t\t\t\twidth 100px\n\t\t\t\t\theight 5vh\n\n\t\t\t\t&:nth-of-type(5)\n\t\t\t\t\tgrid-item(4)\n\t\t\t\t\torder 1\n\n\t\t\t\t\theight 10vh\n\n\n#advanced-grid-example\n\t.examples > .stylus\n\t\tgrid-container()\n\n\t\tspacing-based-attribute(padding-top, 'xxl')\n\n\t\tattribute-for-breakpoints(background-color, $GRID_CONTAINER_BACKGROUNDCOLOR)\n\n\n\n\t\t> div\n\t\t\tbackground-color gray\n\n\t\t\t&:nth-of-type(odd)\n\t\t\t\tgrid-item(4)\n\n\t\t\t\theight gutter-value(5.0)\n\n\t\t\t&:nth-of-type(even)\n\t\t\t\tgrid-item(4)\n\t\t\t\tgrid-item-align(null, end)\n\n\t\t\t\theight 75px\n\n\t\t\t&:first-of-type\n\t\t\t\tgrid-item($span:4, $row-span:2)\n\n\t\t\t\theight auto\n\n\n\n\t\t+breakpoint(xsmall only)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tbackground-color aqua\n\n\n\n\t\t+breakpoint(medium)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(1)\n\t\t\t\t\tgrid-item(4)\n\t\t\t\t\torder 5\n\n\t\t\t\t\twidth 50%\n\t\t\t\t\theight gutter-value(3.0)\n\n\t\t\t\t&:nth-of-type(2)\n\t\t\t\t\tgrid-item($start:8, $end:12)\n\t\t\t\t\torder 4\n\n\t\t\t\t\theight 80px\n\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tgrid-item($start:6, $span:2)\n\t\t\t\t\tgrid-item-align(full, center)\n\t\t\t\t\torder 3\n\n\t\t\t\t\theight 60px\n\n\t\t\t\t&:nth-of-type(4)\n\t\t\t\t\tgrid-item(8, $row-start:1, $row-end:3)\n\t\t\t\t\tgrid-item-align('right', $vertical:'full')\n\t\t\t\t\torder 2\n\n\t\t\t\t\twidth 50%\n\t\t\t\t\theight auto\n\n\t\t\t\t&:nth-of-type(5)\n\t\t\t\t\tgrid-item(4);\n\t\t\t\t\tgrid-item-align(left, top)\n\t\t\t\t\torder 1\n\t\t\t\t\tz-index 1\n\n\t\t\t\t\twidth 200%\n\t\t\t\t\theight 55px\n\n\t\t\t\t\tbackground-color red\n\t\t\t\t\ttransform rotate(5deg)\n\n\n\n\t\t+breakpoint(large)\n\t\t\t> div\n\t\t\t\t&:nth-of-type(1)\n\t\t\t\t\tgrid-item($start:0, $span:4, $row-start:0, $row-span:1)\n\t\t\t\t\tgrid-item-align($vertical:full)\n\t\t\t\t\torder 1\n\n\t\t\t\t\twidth auto\n\t\t\t\t\theight 10vh\n\n\t\t\t\t&:nth-of-type(2)\n\t\t\t\t\tgrid-item($start:4, $end:8, $row-start:0, $row-span:2)\n\t\t\t\t\tgrid-item-align($vertical:full)\n\t\t\t\t\torder 2\n\n\t\t\t\t\theight auto\n\n\t\t\t\t&:nth-of-type(3)\n\t\t\t\t\tgrid-item($start:8, $span:4, $row-start:0, $row-span:3)\n\t\t\t\t\tgrid-item-align($vertical:full)\n\t\t\t\t\torder 3\n\n\t\t\t\t\theight auto\n\n\t\t\t\t&:nth-of-type(4)\n\t\t\t\t\tgrid-item($start:0, $span:4, $row-start:1, $row-end:2)\n\t\t\t\t\tgrid-item-align(right, center)\n\t\t\t\t\torder 4\n\n\t\t\t\t\twidth 100px\n\t\t\t\t\theight 10vh\n\n\t\t\t\t&:nth-of-type(5)\n\t\t\t\t\tgrid-item(6)\n\t\t\t\t\tgrid-item-align(stretch)\n\t\t\t\t\torder 5\n\n\t\t\t\t\twidth auto\n\t\t\t\t\theight 20vh\n\n\t\t\t\t\tbackground-color gray\n\t\t\t\t\ttransform rotate(0deg)\n","/**\n * Renders the basic properties of a grid container, which is the bracket element for elements, which are\n * to be placed in a grid, thereby making the container, more or less, \"the grid itself\".\n *\n * The basic characteristic of this container is the pre-definition of usable grid columns, according to our\n * layout definition.\n */\ngrid-container()\n\tdisplay grid\n\tgrid-auto-flow row\n\tgrid-template-columns repeat($--jig--grid-config.columns, 1fr)\n\tattributes-for-breakpoints({\n\t\t'grid-column-gap' : hash-get-deep($--jig--grid-config, 'gutters', 'horizontal'),\n\t\t'grid-row-gap' : hash-get-deep($--jig--grid-config, 'gutters', 'vertical')\n\t})\n\n\n\n/**\n * Renders the basic properties of a grid item, which is an item inside a grid, being placed according to\n * pre-defined columns.\n *\n * The main purpose of this mixin is, to define the space, the item takes inside the grid. To do this, there are\n * several means of definition. Either just giving it a column-based width, aligning it at the end of other,\n * already existing items, or defining a specific area it should cover, by explicitly defining a start and end column\n * or a combination of both.\n *\n * Additionally, the item may also be defined to take up more than one row, adding the native grid capabilities to\n * our concepts.\n *\n * @param {?Number} [$span=null] - the width of the item in columns\n * @param {?Number} [$start=null] - the horizontal start offset of the item in columns, may be combined with end or span\n * @param {?Number} [$end=null] - the horizontal end offset of the item in columns, may be combined with start or span\n * @param {?Number} [$row-span=null] - the height of the item in rows\n * @param {?Number} [$row-start=null] - the vertical start offset of the item in rows, may be combined with row-end or row-span\n * @param {?Number} [$row-end=null] - the vertical end offset of the item in rows, may be combined with row-start or row-span\n *\n * @example\n * grid-item(12)\n * grid-item(6, 6)\n * grid-item(null, 2, 2)\n * grid-item(6, null, null, 2)\n * grid-item(6, null, null, null, 0, 5)\n */\ngrid-item(\n\t$span=null,\n\t$start=null,\n\t$end=null,\n\t$row-span=null,\n\t$row-start=null,\n\t$row-end=null\n)\n\t$columns = $--jig--grid-config.columns\n\n\tif ($span == null) and ($start == null)\n\t\tgrid-column-end span $columns\n\telse\n\t\tif $span != null\n\t\t\tgrid-column-end span $span\n\n\t\tif $start != null\n\t\t\tgrid-column-start ($start + 1)\n\n\t\tif ($end != null) and ($span == null)\n\t\t\tgrid-column-end ($end + 1)\n\n\tif ($row-span != null) or ($row-start != null)\n\t\tif $row-span != null\n\t\t\tgrid-row-end span $row-span\n\n\t\tif $row-start != null\n\t\t\tgrid-row-start ($row-start + 1)\n\n\t\tif ($row-end != null) and ($row-span == null)\n\t\t\tgrid-row-end ($row-end + 1)\n\n\n\n/**\n * Renders properties of a grid item, to define the item's alignment inside the area defined for the item using\n * the grid-item mixin. The usage of this only make sense for grid items.\n *\n * @param {String} [$horizontal=null] - \"left\"/\"start\", \"right\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n * @param {String} [$vertical=null] - \"top\"/\"start\", \"bottom\"/\"end\", \"middle\"/\"center\" or \"full\"/\"stretch\"\n *\n * @example\n * grid-item-align('left')\n * grid-item-align('center', 'center')\n * grid-item-align(null, 'full')\n */\ngrid-item-align($horizontal=null, $vertical=null)\n\tif $horizontal == 'left'\n\t\t$horizontal = 'start'\n\telse if $horizontal == 'right'\n\t\t$horizontal = 'end'\n\telse if $horizontal == 'middle'\n\t\t$horizontal = 'center'\n\telse if $horizontal == 'full'\n\t\t$horizontal = 'stretch'\n\n\tif $vertical == 'top'\n\t\t$vertical = 'start'\n\telse if $vertical == 'bottom'\n\t\t$vertical = 'end'\n\telse if $vertical == 'middle'\n\t\t$vertical = 'center'\n\telse if $vertical == 'full'\n\t\t$vertical = 'stretch'\n\n\tif $horizontal != null\n\t\tjustify-self unquote($horizontal)\n\n\tif $vertical != null\n\t\talign-self unquote($vertical)\n\n\n\n/**\n * Returns the value of the defined distance between two columns/rows for a breakpoint.\n *\n * The main usage for this is, to define a property value based on the current gutter.\n * This is why the parameter order may seem flipped, but usually, you'd use this inside a breakpoint\n * using auto-breakpoint detection, primarily rather working with the value itself. For other cases:\n * Remember, that that you can simply use named parameters.\n *\n * @param {Number} [$factor=1.0] - factor to apply to the finally evaluated gutter value, most helpful to get half a gutter for example\n * @param {Number} [$add=0] - value to add to the finally evaluated gutter value, may also be negative to subtract\n * @param {String} [$direction='horizontal'] - either \"horizontal\" or \"vertical\", determines the gutter direction in the grid\n * @param {String} [$breakpoint='auto'] - a defined breakpoint name or \"auto\", to use the current breakpoint at the point of usage\n * @return {Number} the determined gutter value with applied factor and/or addition\n *\n * @example\n * padding-left: gutter-value(0.5);\n * margin-top: gutter-value($direction:'vertical', $breakpoint:'small');\n */\ngutter-value(\n\t$factor=1.0,\n\t$add=0,\n\t$direction='horizontal',\n\t$breakpoint='auto'\n)\n\t$direction += ''\n\t$breakpoint += ''\n\t$gutter = hash-get-deep($--jig--grid-config, 'gutters', $direction)\n\t$res = null\n\n\tif $breakpoint == 'auto'\n\t\t$breakpoint = $--jig--current-breakpoint\n\n\tif $gutter != null\n\t\tif type($gutter) == 'object'\n\t\t\t$res = breakpoint-value($gutter, $breakpoint)\n\t\telse\n\t\t\t$res = $gutter\n\n\tif $res == null\n\t\terror('gutter-value | could not resolve gutter, check direction and/or breakpoint')\n\n\treturn ($res * $factor) + $add\n","$--jig--current-breakpoint = keys($--jig--breakpoint-config)[0]\n\n\n\n/**\n * Returns a string to be used in a media query, which defines the range/bounds of a breakpoint with\n * min and/or max value.\n *\n * @param {?Number} [$min=null] - the min width of the breakpoint\n * @param {?Number} [$max=null] - the max width of the breakpoint\n * @return {String} the media query string for the breakpoint range\n *\n * @example\n * build-breakpoint-range(0, 767px)\n * => '(min-width: 0) and (max-width: 767px)'\n * build-breakpoint-range(null, 100rem)\n * => '(max-width: 100rem)'\n */\nbuild-breakpoint-range($min=null, $max=null)\n\t$min-query = ($min != null) ? '(min-width: '+$min+')' : null\n\t$max-query = ($max != null) ? '(max-width: '+$max+')' : null\n\n\treturn str-join(($min-query $max-query), ' and ')\n\n\n\n/**\n * Constructs a query to be used in a media query, based on a breakpoint definition.\n * Also automatically converts values to rem.\n *\n * Directions in composite definitions may be \"up\", \"down\" or \"only\".\n *\n * You may also define the special breakpoints \"landscape\" or \"portrait\" to cover device orientations.\n *\n * @param {?Number|Literal|List<String>} [$breakpoint-definition=0] - either a simple number or a composite definition of width and direction, where the width may either be a number or a name defined in the named layout breakpoints\n * @return {String} the media query string for the breakpoint definition\n *\n * @example\n * build-breakpoint-query(200rem)\n * => '(min-width: 200rem)'\n * build-breakpoint-query(small down)\n * => '(max-width: 199rem)'\n * build-breakpoint-query(('large' 'only'))\n * => '(min-width: 200rem) and (max-width: 499rem)'\n * build-breakpoint-query(1024px only)\n * => '(min-width: 64rem) and (max-width: 64rem)'\n * build-breakpoint-query(landscape)\n * => '(orientation: landscape)'\n */\nbuild-breakpoint-query($breakpoint-definition=0)\n\t$breakpoints = $--jig--breakpoint-config\n\t$breakpoint = $breakpoint-definition ? ''+$breakpoint-definition[0] : 0\n\t$direction = $breakpoint-definition[1] ? ''+$breakpoint-definition[1] : 'up'\n\t$breakpoint-name = null\n\t$next-breakpoint = null\n\t$min = null\n\t$max = null\n\n\tif ($breakpoint == 'landscape') or ($breakpoint == 'portrait')\n\t\treturn '(orientation: '+$breakpoint+')'\n\telse if type($breakpoint) == 'string'\n\t\tif $breakpoint in $breakpoints\n\t\t\t$breakpoint-name = $breakpoint\n\t\t\t$breakpoint = $breakpoints[$breakpoint-name]\n\t\t\t$next-breakpoint = hash-next($breakpoints, $breakpoint-name)\n\t\telse\n\t\t\terror('jig:build-breakpoint-query | \"'+$breakpoint-definition+'\" is not a defined breakpoint')\n\n\tif ($breakpoint-name == null) and ($direction == 'only')\n\t\terror('jig:build-breakpoint-query | only named media queries can have an \"only\" range')\n\n\tif ($direction == 'only') or ($direction == 'up')\n\t\t$min = to-rem($breakpoint, 16px)\n\n\tif ($direction == 'only') or ($direction == 'down')\n\t\tif $breakpoint-name == null\n\t\t\t$max = to-rem($breakpoint, 16px)\n\t\telse if $next-breakpoint-name != null\n\t\t\t$max = to-rem($next-breakpoint, 16px) - to-rem(1px, 16px)\n\n\treturn build-breakpoint-range($min, $max)\n\n\n\n/**\n * Renders media queries based one one or more breakpoint definitions.\n *\n * @param {Number|Literal|List<String>|List<Literal>|List<List<String>>} $breakpoint-definitions - a list of breakpoint definitions according to build-breakpoint-query\n *\n * @see build-breakpoint-query\n * @example\n * breakpoint(small)\n * breakpoint(small down, large up)\n */\nbreakpoint($breakpoint-definitions...)\n\t$breakpoints = $--jig--breakpoint-config\n\n\tfor $breakpoint-definition in $breakpoint-definitions\n\t\t$query = build-breakpoint-query($breakpoint-definition)\n\t\t$breakpoint = $breakpoint-definition ? $breakpoint-definition[0] : 0\n\t\t$direction = (length($breakpoint-definition) > 1) ? $breakpoint-definition[1] : 'up'\n\t\t$breakpoint-index = index(keys($breakpoints), $breakpoint)\n\t\t$print-breakpoint-index = index(keys($breakpoints), $--jig--print-breakpoint)\n\t\t$pre-current-breakpoint = null\n\n\t\tif $--jig--current-breakpoint is defined\n\t\t\t$pre-current-breakpoint = $--jig--current-breakpoint\n\t\tdefine('$--jig--current-breakpoint', $breakpoint, true)\n\n\t\tif $query == ''\n\t\t\t{block}\n\t\telse\n\t\t\tif\t($breakpoint-index != null) and (($breakpoint-index <= $print-breakpoint-index) or ($direction == 'down'))\n\t\t\t\t$media-query = s('print, screen and %s', unquote($query))\n\t\t\t\t@media $media-query\n\t\t\t\t\t{block}\n\t\t\telse\n\t\t\t\t$media-query = s('screen and %s', unquote($query))\n\t\t\t\t@media $media-query\n\t\t\t\t\t{block}\n\t\tdefine('$--jig--current-breakpoint', $pre-current-breakpoint, true)\n\n\n\n/**\n * Search for a value, defined for a breakpoint, in a given hash of values.\n * The function escalates in a mobile-first manner. So we take the value for the smallest breakpoint\n * and step up the breakpoints one by one until we reach the defined breakpoint. So, if we want the\n * according value for \"large\", but we only have a value for \"medium\", we'll get the \"medium\" value, which,\n * in mobile-first, escalates upwards and is the \"large\" value if nothing else is defined.\n *\n * @param {*|Hash} $value - a map of breakpoint-keyed map of values\n * @param {Literal|String} $breakpoint - either \"auto\" (to use the current breakpoint) or one of the defined named layout breakpoints\n * @return {*|null} the breakpoint value or null if nothing was found\n */\nbreakpoint-value($value, $breakpoint='auto')\n\t$breakpoint += ''\n\n\t$breakpoints = $--jig--breakpoint-config\n\tif !($breakpoint in $breakpoints)\n\t\terror('jig:breakpoint-value | given breakpoint \"'+$breakpoint+'\" not defined')\n\n\tif type($value) == 'object'\n\t\t$res = null\n\n\t\tif $breakpoint == 'auto'\n\t\t\t$breakpoint = $--jig--current-breakpoint\n\n\t\tfor $breakpoint-name, $breakpoint-definition in $breakpoints\n\t\t\t$breakpoint-value = $value[$breakpoint-name]\n\n\t\t\tif $breakpoint-value != null\n\t\t\t\t$res = $breakpoint-value\n\n\t\t\tif $breakpoint-name == $breakpoint\n\t\t\t\treturn $res\n\n\t\treturn null\n\telse\n\t\treturn $value\n\n\n\n/**\n * Renders attribute values for given attributes for defined breakpoints.\n *\n * Definitions will be rendered together if possible, minimizing the amount of media queries.\n * However, each call of this mixin will, most likely, render multiple media queries, so keep a close eye\n * on your media query structure to avoid unnecessarily doubled definitions and keep media queries to a minimum.\n * If in doubt, it might be a better idea to write the queries manually, perhaps rather using `[]` or\n * `breakpoint-value` to automatically pull values from breakpoint value hashes.\n *\n * @param {hash} $attributes - keys are attribute names, while values are either plain values or hashes with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @example\n * attributes-for-breakpoints(\n *   {\n *     'font-size' : 12px,\n *     'line-height' : {\n *       'small' : 1,\n *       'large' : 1.25\n *     },\n *     'margin-top' : {\n *       'small' : 10px,\n *       'medium' : 20px\n *     }\n *   },\n *   2.0\n * )\n */\nattributes-for-breakpoints($attributes, $factor=null)\n\t$breakpoints = $--jig--breakpoint-config\n\n\t$attributes-for-breakpoints = {}\n\tfor $attribute-name, $attribute-value in $attributes\n\t\tif type($attribute-value) != 'object'\n\t\t\tif $factor == null\n\t\t\t\t{$attribute-name} $attribute-value\n\t\t\telse\n\t\t\t\t{$attribute-name} ($factor * $attribute-value)\n\t\telse\n\t\t\tfor $breakpoint-name, $breakpoint-definition in $breakpoints\n\t\t\t\t$breakpoint-value = $attribute-value[$breakpoint-name]\n\t\t\t\tif $breakpoint-value != null\n\t\t\t\t\tif !($breakpoint-name in $attributes-for-breakpoints)\n\t\t\t\t\t\t$attributes-for-breakpoints[$breakpoint-name] = {}\n\t\t\t\t\t$attributes-for-breakpoints[$breakpoint-name][$attribute-name] = $breakpoint-value;\n\n\tfor $breakpoint-name, $breakpoint-definition in $breakpoints\n\t\t$breakpoint-attrs = $attributes-for-breakpoints[$breakpoint-name]\n\t\tif ($breakpoint-attrs != null) and (length($breakpoint-attrs) > 0)\n\t\t\t+breakpoint($breakpoint-name)\n\t\t\t\tfor $attribute-name, $attribute-value in $breakpoint-attrs\n\t\t\t\t\tif $factor == null\n\t\t\t\t\t\t{$attribute-name} $attribute-value\n\t\t\t\t\telse\n\t\t\t\t\t\t{$attribute-name} ($factor * $attribute-value)\n\n\n\n/**\n * Renders attribute values for given attribute for defined breakpoints.\n *\n * This is the single attribute version of `attributes-for-breakpoints`.\n * Since this version does not optimize the usage of media queries, please make sure to only use this mixin,\n * if you'll definitely only have one attribute to be defined in multiple breakpoints.\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * attribute-for-breakpoints(\n *   'line-height',\n *   {\n *     'small' : 1,\n *     'large' : 1.25\n *   }\n * )\n */\nattribute-for-breakpoints($attribute, $value, $factor=null)\n\t$attributes = {}\n\t$attributes[$attribute] = $value\n\tattributes-for-breakpoints($attributes, $factor);\n\n\n\n/**\n * Use this, if you need to overwrite attribute values previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @param {Hash} $attributes - keys are attribute names, while values are either plain values or hashes with breakpoint name keys, providing different values per breakpoint\n * @param {Number} [$factor=null] - if a float factor is provided all values will be multiplied with this factor\n *\n * @example\n * overwrite-breakpoint-for-attributes(\n *   {\n *     'font-size' : 12px,\n *     'line-height' : 1.25\n *     'margin-top' : 20px\n *   },\n *   2.0\n * )\n */\noverwrite-breakpoint-for-attributes($attributes, $factor=null)\n\t+breakpoint(0)\n\t\tfor $attribute-name, $attribute-value in $attributes\n\t\t\tif $factor == null\n\t\t\t\t{$attribute-name}: $attribute-value\n\t\t\telse\n\t\t\t\t{$attribute-name}: ($factor * $attribute-value)\n\n\n\n/**\n * Use this, if you need to overwrite an attribut value previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @param {String} $attribute - the name of the attribute you want to set\n * @param {*} $value - the value to set the attribute to\n * @param {Number} [$factor=null] - if a float factor is provided the value will be multiplied with this factor\n *\n * @example\n * overwrite-breakpoint-for-attribute(\n *   font-size,\n *   12px,\n *   2.0\n * )\n */\noverwrite-breakpoint-for-attributes($attribute, $value, $factor=null)\n\t+breakpoint(0)\n\t\tif $factor == null\n\t\t\t{$attribute}: $value\n\t\telse\n\t\t\t{$attribute}: ($factor * $value)\n\n\n\n/**\n * Use this, if you need to overwrite an attribute value previously defined in (a) breakpoint(s).\n *\n * A use case might be, for example, to set a font-size to a static value in an element with a responsive,\n * breakpoint-based font-size definition.\n *\n * @example\n * +overwrite-breakpoints()\n *   font-size 12xp\n *   margin-top 20px\n */\noverwrite-breakpoints()\n\t+breakpoint(0)\n\t\t{block}\n"]}